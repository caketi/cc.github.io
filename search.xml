<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/09/19/GitHub%20host%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>修改本地的hosts文件，建立对github的解析：</p>
<p>C:\Windows\System32\drivers\etc\hosts</p>
<p>添加：</p>
<p>　　IP　　<a href="https://www.github.com/">https://www.github.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/19/XXE-notes-intro-level/</url>
    <content><![CDATA[<ul>
<li><strong><em>a classification of attack that is often very simple to execute, but with devastating results.Relies on improperly configured XML parser within an application’s code</em></strong></li>
<li>an API endpoint that accepts an XML payload</li>
<li><strong><em>XML-like formats include SVG, HTML/DOM, PDF(XPDF), and RTF</em></strong></li>
<li>magic behind — XML specification includes a special annotation for importing external files. This special directive, called an external entity, is interpreted on the machine on which the XML file is evaluated. <blockquote>
<p>This means that a spcially crafted XML payload sent to a server’s XML pareser could result in compromsing files in that servers’s file structure.</p>
</blockquote>
</li>
<li>used to compromise files from other users</li>
<li>access files like /etc/shadow – store important credentials required for a Univ-based server to function properly<h3 id="Direct-XXE"><a href="#Direct-XXE" class="headerlink" title="Direct XXE"></a>Direct XXE</h3>In direct XXE, an XML object is sent to the server with an external entity flag. It is<br>then parsed, and a result is returned that includes the external entity <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> A simple button. Calls the <span class="function"><span class="keyword">function</span> `<span class="title">screenshot</span>(<span class="params"></span>)` <span class="title">when</span> <span class="title">clicked</span>.</span></span><br><span class="line"><span class="function"> --&gt;</span></span><br><span class="line"><span class="function">&lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">button</span>&quot;</span></span><br><span class="line"><span class="function"> <span class="title">id</span>=&quot;<span class="title">screenshot</span>-<span class="title">button</span>&quot;</span></span><br><span class="line"><span class="function"> <span class="title">onclick</span>=&quot;<span class="title">screenshot</span>(<span class="params"></span>)&quot;&gt;</span></span><br><span class="line"><span class="function"> <span class="title">Send</span> <span class="title">Screenshot</span> <span class="title">to</span> <span class="title">Support</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="function">/*</span></span><br><span class="line"><span class="function"> * <span class="title">Collect</span> <span class="title">HTML</span> <span class="title">DOM</span> <span class="title">from</span> <span class="title">the</span> `<span class="title">content</span>` <span class="title">element</span> <span class="title">and</span> <span class="title">invoke</span> <span class="title">an</span> <span class="title">XML</span></span></span><br><span class="line"><span class="function"> * <span class="title">parser</span> <span class="title">to</span> <span class="title">convert</span> <span class="title">the</span> <span class="title">DOM</span> <span class="title">text</span> <span class="title">to</span> <span class="title">XML</span>.</span></span><br><span class="line"><span class="function"> *</span></span><br><span class="line"><span class="function"> * <span class="title">Send</span> <span class="title">the</span> <span class="title">XML</span> <span class="title">over</span> <span class="title">HTTP</span> <span class="title">to</span> <span class="title">a</span> <span class="title">function</span> <span class="title">that</span> <span class="title">will</span> <span class="title">generate</span> <span class="title">a</span> <span class="title">screenshot</span></span></span><br><span class="line"><span class="function"> * <span class="title">from</span> <span class="title">the</span> <span class="title">provided</span> <span class="title">XML</span>.</span></span><br><span class="line"><span class="function"> *</span></span><br><span class="line"><span class="function"> * <span class="title">Send</span> <span class="title">the</span> <span class="title">screenshot</span> <span class="title">to</span> <span class="title">support</span> <span class="title">staff</span> <span class="title">for</span> <span class="title">further</span> <span class="title">analysis</span>.</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">screenshot</span> = <span class="title">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Attempt to convert the `content` element to XML.</span></span><br><span class="line"><span class="comment"> * Catch if this process fails—generally this should succeed</span></span><br><span class="line"><span class="comment"> * because HTML is a subset of XML.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;content&#x27;</span>).innerHTML;</span><br><span class="line"> <span class="keyword">const</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line"> <span class="keyword">const</span> dom = serializer.serializeToString(div);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Once the DOM has been converted to XML, generate a request to</span></span><br><span class="line"><span class="comment"> * an endpoint that will convert the XML to an image. Hence</span></span><br><span class="line"><span class="comment">142 | Chapter 12: XML External Entity (XXE)</span></span><br><span class="line"><span class="comment"> * resulting in a screenshot.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"> <span class="keyword">const</span> url = <span class="string">&#x27;https://util.mega-bank.com/screenshot&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line"> data.append(<span class="string">&#x27;dom&#x27;</span>, dom);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the conversion of XML -&gt; image is successful,</span></span><br><span class="line"><span class="comment"> * send the screenshot to support for analysis.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Else alert the user the process failed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> sendScreenshotToSupport(xhr.responseText, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) &#123; alert(<span class="string">&#x27;could not send screenshot.&#x27;</span>) &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123; alert(<span class="string">&#x27;screenshot sent to support!&#x27;</span>); &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> xhr.send(data);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Warn the user if their browser is not compatible with this feature.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> alert(Your browser does not support <span class="built_in">this</span> functionality. Consider upgrading.</span><br><span class="line"> );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<ol>
<li>The browser converts the current user’s view (via the DOM) to XML.</li>
<li>The browser sends this XML to a service which converts it to a JPG.</li>
<li>The browser sends that JPG to a member of MegaBank support via another API.</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmltojpg <span class="keyword">from</span> <span class="string">&#x27;./xmltojpg&#x27;</span></span><br><span class="line"><span class="comment">/*Convert an XML to a JPG image.</span></span><br><span class="line"><span class="comment"> *Return the image data to the requester</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.post(<span class="string">&#x27;/screenshot&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.body.dom) &#123; <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)&#125;</span><br><span class="line">    xmltojpg.convert(req.body.dom)</span><br><span class="line">    .then(<span class="function">(<span class="params">err, jpg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;<span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)&#125;</span><br><span class="line">        <span class="keyword">return</span> res.send(jpg)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>To convert the XML file to a JPG file, it must go through an XML parser. To be a valid<br>XML parser, it must follow the XML spec.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> utilAPI <span class="keyword">from</span> <span class="string">&#x27;./utilAPI&#x27;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generate a new XML HTTP request targeting the XML -&gt; JPG utility API.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>, utilAPI.url + <span class="string">&#x27;/screenshot&#x27;</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Provide a manually crafted XML string hat makes use of the external entity functionality in many XML parsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> rawXMLString = <span class="string">&#x27;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;xxe&gt;&amp;xxe;&lt;/xxe&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === XMLHttpRequest.DONE &amp;&amp; <span class="built_in">this</span>.status === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">// chekc response data here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send the request to the XML -&gt; JPG utility API endpoint</span></span><br><span class="line">xhr.send(rawXMLString)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/18/Securing%20Third-party/</url>
    <content><![CDATA[<p>Third-party dependencies, their dependencies, and the dependencies of those depen‐<br>dencies (etc., etc.) make up what is known as a dependency tree (see Figure 27-1).<br>Using the npm ls command in an npm-powered project, you can list an entire<br>dependency tree out for evaluation. This command is powerful for seeing how manydependencies your application actually has, because you may not consider the subde‐<br>pendencies on a regular basis.</p>
<p>#####In an ideal world, each component in an application that relied on JQuery to function<br>(like the preceding example) would rely on the same version of JQuery. But in the<br>real world, that is rarely the case. First-party applications can standardize on depend‐<br>ency versions, but it is unlikely the first-party application will standardize with the<br>remainder of the dependency chain. This is because each item in the dependency<br>chain may rely on functionality or implementation details that differ from version to<br>version. The philosophy behind when and how to upgrade dependencies also differs<br>from organization to organization</p>
<p>#Dependency Trees in the Real World<br>A real-world dependency tree often looks like the following:<br>Primary Application v1.6 → JQuery 3.4.0 Primary Application v1.6 → SPA Frame‐<br>work v1.3.2 → JQuery v2.2.1 Primary Application v1.6 → UI Component Library<br>v4.5.0 → JQuery v2.2.1<br>It is very much possible that version 2.2.1 of a dependency has critical vulnerabilities,<br>while version 3.4.0 does not. As a result, each unique dependency should be evalu‐<br>ated, in addition to each unique version of each unique dependency. In a large appli‐<br>cation with a hundred third-party dependencies, this can result in a dependency tree<br>spanning thousands or even tens of thousands of unique subdependencies and<br>dependency versions.</p>
<p><strong><em>The easiest way to begin finding vulnerabilities in a dependency tree is to compare your application’s dependency tree against a well-known CVE database.</em></strong></p>
<blockquote>
<p>You can download a third-party scanner (like Snyk), or write a bit of script to convert<br>your dependency tree into a list and then compare it against a remote CVE database.<br>In the npm world, you can begin this process with a command like: npm list –<br>depth=[depth].</p>
</blockquote>
<p><strong><em>This is where shrinkwrapping comes into play. Running the command npm shrink<br>wrap against an npm repo will generate a new file called npm-shrinkwrap.json. From<br>this point forward, the current version of each dependency and subdependency (the<br>dependency tree) will be used at the exact version level</em></strong></p>
]]></content>
  </entry>
</search>
