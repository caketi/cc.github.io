<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github host 配置</title>
    <url>/2020/09/19/GitHub%20host%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>修改本地的hosts文件，建立对github的解析：</p>
<p>C:\Windows\System32\drivers\etc\hosts</p>
<p>添加：</p>
<p>　　IP　　<a href="https://www.github.com/">https://www.github.com</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>XXE-notes-intro-level</title>
    <url>/2020/09/19/XXE-notes-intro-level/</url>
    <content><![CDATA[<a id="more"></a>



<ul>
<li><strong><em>a classification of attack that is often very simple to execute, but with devastating results.Relies on improperly configured XML parser within an application’s code</em></strong></li>
<li>an API endpoint that accepts an XML payload</li>
<li><strong><em>XML-like formats include SVG, HTML/DOM, PDF(XPDF), and RTF</em></strong></li>
<li>magic behind — XML specification includes a special annotation for importing external files. This special directive, called an external entity, is interpreted on the machine on which the XML file is evaluated. <blockquote>
<p>This means that a spcially crafted XML payload sent to a server’s XML pareser could result in compromsing files in that servers’s file structure.</p>
</blockquote>
</li>
<li>used to compromise files from other users</li>
<li>access files like /etc/shadow – store important credentials required for a Univ-based server to function properly<h3 id="Direct-XXE"><a href="#Direct-XXE" class="headerlink" title="Direct XXE"></a>Direct XXE</h3>In direct XXE, an XML object is sent to the server with an external entity flag. It is<br>then parsed, and a result is returned that includes the external entity <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> A simple button. Calls the <span class="function"><span class="keyword">function</span> `<span class="title">screenshot</span>(<span class="params"></span>)` <span class="title">when</span> <span class="title">clicked</span>.</span></span><br><span class="line"><span class="function"> --&gt;</span></span><br><span class="line"><span class="function">&lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">button</span>&quot;</span></span><br><span class="line"><span class="function"> <span class="title">id</span>=&quot;<span class="title">screenshot</span>-<span class="title">button</span>&quot;</span></span><br><span class="line"><span class="function"> <span class="title">onclick</span>=&quot;<span class="title">screenshot</span>(<span class="params"></span>)&quot;&gt;</span></span><br><span class="line"><span class="function"> <span class="title">Send</span> <span class="title">Screenshot</span> <span class="title">to</span> <span class="title">Support</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="function">/*</span></span><br><span class="line"><span class="function"> * <span class="title">Collect</span> <span class="title">HTML</span> <span class="title">DOM</span> <span class="title">from</span> <span class="title">the</span> `<span class="title">content</span>` <span class="title">element</span> <span class="title">and</span> <span class="title">invoke</span> <span class="title">an</span> <span class="title">XML</span></span></span><br><span class="line"><span class="function"> * <span class="title">parser</span> <span class="title">to</span> <span class="title">convert</span> <span class="title">the</span> <span class="title">DOM</span> <span class="title">text</span> <span class="title">to</span> <span class="title">XML</span>.</span></span><br><span class="line"><span class="function"> *</span></span><br><span class="line"><span class="function"> * <span class="title">Send</span> <span class="title">the</span> <span class="title">XML</span> <span class="title">over</span> <span class="title">HTTP</span> <span class="title">to</span> <span class="title">a</span> <span class="title">function</span> <span class="title">that</span> <span class="title">will</span> <span class="title">generate</span> <span class="title">a</span> <span class="title">screenshot</span></span></span><br><span class="line"><span class="function"> * <span class="title">from</span> <span class="title">the</span> <span class="title">provided</span> <span class="title">XML</span>.</span></span><br><span class="line"><span class="function"> *</span></span><br><span class="line"><span class="function"> * <span class="title">Send</span> <span class="title">the</span> <span class="title">screenshot</span> <span class="title">to</span> <span class="title">support</span> <span class="title">staff</span> <span class="title">for</span> <span class="title">further</span> <span class="title">analysis</span>.</span></span><br><span class="line"><span class="function"> */</span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">screenshot</span> = <span class="title">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Attempt to convert the `content` element to XML.</span></span><br><span class="line"><span class="comment"> * Catch if this process fails—generally this should succeed</span></span><br><span class="line"><span class="comment"> * because HTML is a subset of XML.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;content&#x27;</span>).innerHTML;</span><br><span class="line"> <span class="keyword">const</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line"> <span class="keyword">const</span> dom = serializer.serializeToString(div);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Once the DOM has been converted to XML, generate a request to</span></span><br><span class="line"><span class="comment"> * an endpoint that will convert the XML to an image. Hence</span></span><br><span class="line"><span class="comment">142 | Chapter 12: XML External Entity (XXE)</span></span><br><span class="line"><span class="comment"> * resulting in a screenshot.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"> <span class="keyword">const</span> url = <span class="string">&#x27;https://util.mega-bank.com/screenshot&#x27;</span>;</span><br><span class="line"> <span class="keyword">const</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line"> data.append(<span class="string">&#x27;dom&#x27;</span>, dom);</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the conversion of XML -&gt; image is successful,</span></span><br><span class="line"><span class="comment"> * send the screenshot to support for analysis.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Else alert the user the process failed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> sendScreenshotToSupport(xhr.responseText, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) &#123; alert(<span class="string">&#x27;could not send screenshot.&#x27;</span>) &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123; alert(<span class="string">&#x27;screenshot sent to support!&#x27;</span>); &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> xhr.send(data);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Warn the user if their browser is not compatible with this feature.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> alert(Your browser does not support <span class="built_in">this</span> functionality. Consider upgrading.</span><br><span class="line"> );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<ol>
<li>The browser converts the current user’s view (via the DOM) to XML.</li>
<li>The browser sends this XML to a service which converts it to a JPG.</li>
<li>The browser sends that JPG to a member of MegaBank support via another API.</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmltojpg <span class="keyword">from</span> <span class="string">&#x27;./xmltojpg&#x27;</span></span><br><span class="line"><span class="comment">/*Convert an XML to a JPG image.</span></span><br><span class="line"><span class="comment"> *Return the image data to the requester</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.post(<span class="string">&#x27;/screenshot&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.body.dom) &#123; <span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)&#125;</span><br><span class="line">    xmltojpg.convert(req.body.dom)</span><br><span class="line">    .then(<span class="function">(<span class="params">err, jpg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;<span class="keyword">return</span> res.sendStatus(<span class="number">400</span>)&#125;</span><br><span class="line">        <span class="keyword">return</span> res.send(jpg)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>To convert the XML file to a JPG file, it must go through an XML parser. To be a valid<br>XML parser, it must follow the XML spec.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> utilAPI <span class="keyword">from</span> <span class="string">&#x27;./utilAPI&#x27;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generate a new XML HTTP request targeting the XML -&gt; JPG utility API.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">&#x27;POST&#x27;</span>, utilAPI.url + <span class="string">&#x27;/screenshot&#x27;</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Provide a manually crafted XML string hat makes use of the external entity functionality in many XML parsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> rawXMLString = <span class="string">&#x27;&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;xxe&gt;&amp;xxe;&lt;/xxe&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState === XMLHttpRequest.DONE &amp;&amp; <span class="built_in">this</span>.status === <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="comment">// chekc response data here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send the request to the XML -&gt; JPG utility API endpoint</span></span><br><span class="line">xhr.send(rawXMLString)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/18/Securing%20Third-party/</url>
    <content><![CDATA[<p>Third-party dependencies, their dependencies, and the dependencies of those depen‐<br>dencies (etc., etc.) make up what is known as a dependency tree (see Figure 27-1).<br>Using the npm ls command in an npm-powered project, you can list an entire<br>dependency tree out for evaluation. This command is powerful for seeing how manydependencies your application actually has, because you may not consider the subde‐<br>pendencies on a regular basis.</p>
<p>#####In an ideal world, each component in an application that relied on JQuery to function<br>(like the preceding example) would rely on the same version of JQuery. But in the<br>real world, that is rarely the case. First-party applications can standardize on depend‐<br>ency versions, but it is unlikely the first-party application will standardize with the<br>remainder of the dependency chain. This is because each item in the dependency<br>chain may rely on functionality or implementation details that differ from version to<br>version. The philosophy behind when and how to upgrade dependencies also differs<br>from organization to organization</p>
<p>#Dependency Trees in the Real World<br>A real-world dependency tree often looks like the following:<br>Primary Application v1.6 → JQuery 3.4.0 Primary Application v1.6 → SPA Frame‐<br>work v1.3.2 → JQuery v2.2.1 Primary Application v1.6 → UI Component Library<br>v4.5.0 → JQuery v2.2.1<br>It is very much possible that version 2.2.1 of a dependency has critical vulnerabilities,<br>while version 3.4.0 does not. As a result, each unique dependency should be evalu‐<br>ated, in addition to each unique version of each unique dependency. In a large appli‐<br>cation with a hundred third-party dependencies, this can result in a dependency tree<br>spanning thousands or even tens of thousands of unique subdependencies and<br>dependency versions.</p>
<p><strong><em>The easiest way to begin finding vulnerabilities in a dependency tree is to compare your application’s dependency tree against a well-known CVE database.</em></strong></p>
<blockquote>
<p>You can download a third-party scanner (like Snyk), or write a bit of script to convert<br>your dependency tree into a list and then compare it against a remote CVE database.<br>In the npm world, you can begin this process with a command like: npm list –<br>depth=[depth].</p>
</blockquote>
<p><strong><em>This is where shrinkwrapping comes into play. Running the command npm shrink<br>wrap against an npm repo will generate a new file called npm-shrinkwrap.json. From<br>this point forward, the current version of each dependency and subdependency (the<br>dependency tree) will be used at the exact version level</em></strong></p>
]]></content>
  </entry>
  <entry>
    <title>Caketi  on the way</title>
    <url>/2020/09/19/Caketi-on-the-way/</url>
    <content><![CDATA[<p>进来看看？</p>
<a id="more"></a>
<h2 id="notes-about-caketi"><a href="#notes-about-caketi" class="headerlink" title="notes about caketi."></a>notes about caketi.</h2><p>Web Application Reconnaissance<br>Due to the increasing size and complexity of modern web applications, a first step in<br>finding application vulnerabilities is properly mapping an application and evaluating<br>each major functional component for architectural or logical risks. Proper application<br>recon is an essential first step prior to attacking a web application. Good recon will<br>provide you with a deep understanding of the target web application, which can be<br>used both for prioritizing attacks and avoiding detection.<br>Recon skills give you insight into how a qualified attacker would attack your web<br>application. This gives you the added benefit of being able to prioritize defenses, if<br>you are an application owner. Due to the ever-increasing complexity of modern web<br>applications, your recon skills may be limited by your engineering skills. As a result,<br>recon and engineering expertise go hand in hand.<br>The structure of modern web applications<br>• Unlike web applications 20 years ago, today’s web applications are built on many<br>layers of technology, and typically built with extensive server-to-user and userto-user functionality. Most applications use many forms of persistence, storing<br>data on both the server and the client (typically a browser). Because of this, the<br>potential surface area of any web application is quite broad.<br>• The types of databases, display-level technology, and server-side software used in<br>modern web applications is built on top of the problems web applications have<br>encountered in the past. Largely, the modern application ecosystem is developed<br>with developer productivity and user experience in mind. Because of this, new<br>types of vulnerabilities have emerged that would not have been possible<br>beforehand.<br>Subdomains, APIs, and HTTP<br>• Mastery of web application reconnaissance will require you to know ways to fully<br>map the surface area of a web application. Because today’s web applications are<br>much more distributed than those of the past, you may need to become familiar<br>with (and find) multiple web servers prior to discovering exploitable code. Fur‐<br>thermore, the interactions between these web servers may assist you in not only<br>understanding the target application, but in prioritizing your attacks as well.<br>• At the application layer, most websites today use HTTP for communication<br>between client and server. However, new protocols are being developed and inte‐<br>grated into modern web applications. Web applications of the future may make<br>Web Application Reconnaissance | 283<br>heavy use of sockets or RTC, so making use of easily adaptable recon techniques<br>is essential.<br>Third-party dependencies<br>• Today’s web applications rely just as much on third-party integrations as they do<br>on first-party code. Sometimes, they rely on third-party integrations even more<br>than first-party code. These dependencies are not audited at the same standards<br>as first-party code, and as a result can be a good attack vector for a hacker.<br>• Using recon techniques, we can fingerprint specific versions of web servers,<br>client-side frameworks, CSS frameworks, and databases. Using these fingerprints,<br>we may be able to determine specific (vulnerable) versions to exploit.<br>Application architecture<br>• Proper evaluation of an application’s software architecture can lead to the discov‐<br>ery of widespread vulnerabilities that result from inconsistent security controls.<br>• Application security architecture can be used as a proxy for the quality of code in<br>an application—a signal that hackers take very seriously when evaluating which<br>application to focus their efforts on.<br>Offense<br>Cross-Site Scripting (XSS)<br>• At their core, XSS attacks are possible when an application improperly makes use<br>of user-provided inputs in a way that permits script execution.<br>• When traditional forms of XSS are properly mitigated via sanitization of DOM<br>elements, or at the API level (or both), it still may be possible to find XSS vulner‐<br>abilities. XSS sinks exist as a result of bugs in the browser DOM spec, and occa‐<br>sionally as a result of improperly implemented third-party integrations.<br>Cross-Site Request Forgery (CSRF)<br>• CSRF attacks take advantage of a trust relationship established between the<br>browser and the user. Because of the trusting nature of this relationship, an<br>improperly configured application may accept elevated privilege requests on<br>behalf of a user who inadvertently clicked a link or filled out a web form.<br>• If the low-hanging fruit (state-changing HTTP GET requests) are already fil‐<br>tered, then alternative methods of attack, such as web forms, should be<br>considered.<br>284 | Chapter 28: Part III Summary<br>XML External Entity (XXE)<br>• A weakness in the XML specification allows improperly configured XML parsers<br>to leak sensitive server files in response to a valid XML request payload.<br>• These vulnerabilities are often visible when a request accepts an XML or XMLlike payload directly from the client, but in more complicated applications, indi‐<br>rect XXE may be possible. Indirect XXE occurs when a server accepts a payload<br>from the user, then formulates an XML file to send to the XML parser, rather<br>than accepting an XML object directly.<br>Injection attacks<br>• Although SQL injection attacks are the most widely known and prepared for,<br>injection attacks can occur against any CLI utility a server makes use of in<br>response to an API request.<br>• SQL databases are (often) guarded well against injection. Automation is perfect<br>for testing well-known SQL injection attacks since the method of attack is so well<br>documented. If SQL injection fails, consider image compressors, backup utilities,<br>and other CLIs as potential targets.<br>Denial of service (DoS)<br>• DoS attacks come in all shapes and forms, ranging from annoying reductions in<br>server performance, all the way to complete interruption for legitimate users.<br>• DoS attacks can target regular expression evaluation engines, resourceconsuming server processes, as well as simply targeting standard application or<br>network functionality with huge amounts of traffic or requests.<br>Exploiting third-party dependencies<br>• Third-party dependencies are rapidly becoming one of the easiest attack vectors<br>for a hacker. This is due to a combination of factors, one of which is the fact that<br>third-party dependencies are often not audited as closely as first-party code.<br>• Open source CVE databases can be used to find previously reported, known vul‐<br>nerabilities in well-known dependencies, which can then be exploited against a<br>target application unless the application has been updated or manually patched.<br>Defense<br>Secure application architecture<br>• Writing a secure web application starts at the architecture phase. A vulnerability<br>discovered in this phase can cost as much as 60 times less than a vulnerability<br>found in production code.<br>Defense | 285<br>• Proper security architecture can result in application-wide mitigations for com‐<br>mon security risks, versus on-demand mitigations, which are more likely to be<br>inconsistent or forgotten.<br>Reviewing code for security<br>• After a secure application architecture has been decided upon, a proper secure<br>code review process should be implemented to prevent common and easy to spot<br>security bugs from being pushed into production.<br>• Security reviews at the code review stage are performed similarly to a traditional<br>code review. The main difference should be the type of bugs sought after, and<br>how files and modules are prioritized given a limited time frame.<br>Vulnerability discovery<br>• Ideally, vulnerabilities would be discovered prior to being deployed in a produc‐<br>tion application. Unfortunately, this is often not the case. But there are several<br>techniques you can take advantage of to reduce the number of production<br>vulnerabilities.<br>• In addition to implementing your own vulnerability discovery pipeline, you can<br>take advantage of third-party specialists in the form of bug bounty programs and<br>penetration testers. Not only can these services help you discover vulnerabilities<br>early, but they can also incentivize hackers to report vulnerabilities to your orga‐<br>nization for payment rather than selling found vulnerabilities on the black mar‐<br>ket or exploiting the vulnerability themselves.<br>Vulnerability management<br>• Once a vulnerability is found, it should be reproduced and triaged. The vulnera‐<br>bility should be scored based on its potential impact, so its fix can be properly<br>prioritized.<br>• A number of scoring algorithms exist for determining the severity of a vulnera‐<br>bility, with CVSS being the most well known. It is imperative that your organiza‐<br>tion implements a scoring algorithm. The scoring algorithm you choose is less<br>important than the fact that you use one. Each scoring system will have a margin<br>of error, but as long as it can distinguish the difference between a severe and lowrisk vulnerability, it will help you prioritize the way in which work is distributed<br>and bugs are fixed.<br>Defending against XSS attacks<br>• XSS attacks can be mitigated at a number of locations in a web application stack:<br>from the API level with sanitization functions, in the database, or on the client.<br>Because XSS attacks target the client, the client is the most important surface area<br>for mitigations to be implemented.<br>286 | Chapter 28: Part III Summary<br>• Simple XSS vulnerabilities can be eliminated with smart coding, in particular<br>when dealing with the DOM. More advanced XSS vulnerabilities, such as those<br>that rely on DOM sinks, are much harder to mitigate and may not even be repro‐<br>duceable! As a result, being aware of the most common sinks and sources for<br>each type of XSS is important.<br>Defending against CSRF attacks<br>• CSRF attacks take advantage of the trust relationship between a user and a<br>browser. As a result, CSRF attacks are mitigated by introducing additional rules<br>for state-changing requests that a browser cannot automatically confirm.<br>• Many mitigations against CSRF-style vulnerabilities exist, from simply eliminat‐<br>ing state-changing GET requests in your codebase, to implementing CSRF tokens<br>and requiring 2FA confirmation on elevated API requests.<br>Defending against XXE<br>• Most XXE attacks are both simple to exploit and simple to protect against. All<br>modern XML parsers provide configuration options that allow the external entity<br>to be disabled.<br>• More advanced XXE defense involves considering XML-like formats and XMLlike parsers, such as SVG, PDF, RTF, etc., and evaluating the implementation of<br>usage of those parsers in the same way you would a true XML parser to deter‐<br>mine if any crossover functionality is present.<br>Defending against injection<br>• Injection attacks that target SQL databases can be stopped or reduced with<br>proper SQL configuration and the proper generation of SQL queries (e.g., pre‐<br>pared statements).<br>• Injection attacks that target CLI interfaces are more difficult to detect and pre‐<br>vent against. When designing these tools, or implementing one, best practices<br>like the principle of least authority and separation of concerns should be strongly<br>considered.<br>Defending against DoS<br>• DoS attacks originating from a single attacker can be mitigated by scanning regu‐<br>lar expressions to detect backtracing problems, preventing user API calls from<br>accessing functions that consume significant server resources, and adding rate<br>limitations to these functions when required.<br>• DDoS attacks are more difficult to mitigate, but mitigations should start at the<br>firewall and work their way up. Blackholing traffic is a potential solution, as is<br>enlisting the help of a bandwidth management service that specializes in DDoS.<br>Defense | 287<br>Securing third-party dependencies<br>• Third-party dependencies are one of the security banes of modern web applica‐<br>tions. Because of their rampant inclusion in first-party applications, combined<br>with a mixed bag of security audits, third-party dependencies are a common<br>cause of an application’s demise.<br>• Third-party integrations should be integrated in a way that limits the integra‐<br>tions’ permissions and scope to what is necessary. In addition, the integrations<br>should be scanned and reviewed prior to integration. This includes looking into<br>CVE databases to determine if any other researchers or organizations have<br>reported vulnerabilities that affect the integration in question.</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/18/defending%20Dos/</url>
    <content><![CDATA[<hr>
<h2 id="title-Defending-DoS"><a href="#title-Defending-DoS" class="headerlink" title="title: Defending DoS"></a>title: Defending DoS</h2><a id="more"></a>

<blockquote>
<p>As such, a first measure against DoS-style attacks should be building up a compre‐<br>hensive enough logging system in your server that all requests are logged alongside<br>their time to respond.<br>#Proteting Against Regex DoS<br>With a proper code review process, you can prevent regex DoS sinks (evil or mali‐<br>cious regex) from ever entering your codebase.</p>
</blockquote>
<p>DoS attacks come via two major archetypes: single attacker (DoS) and multiple<br>attackers (DDoS).<br>Most, but not all, DDoS attacks are performed by overwhelming server resources<br>rather than via bug exploitation. Because of this, countermeasures for DDoS may also<br>cause difficulty for legitimate users</p>
<p>Single-attacker DoS attacks, on the other hand, can be mitigated by smart application<br>architecture that prevents users from being able to take over application resources for<br>a long period of time.<br>Regular-expression-based DoS attacks can be mitigated by implementing a static<br>analysis tool (like a linter) to scan regular expressions in your codebase and warn if<br>any appear to be “evil” syntactically.<br>Because of their general ease of exploitation, DoS-style attacks are rampant through‐<br>out the web. Even if you don’t expect your application to be a target of DoS attacks,<br>you should implement anti-DoS mitigations once you can afford it just in case you<br>become a target in the future.</p>
]]></content>
  </entry>
</search>
